// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runWeight2Reg (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_read,
        p_read1,
        p_read2,
        p_read3,
        p_read4,
        p_read5,
        p_read6,
        p_read7,
        p_read8,
        p_read9,
        p_read10,
        p_read11,
        p_read12,
        p_read13,
        p_read14,
        p_read15,
        C,
        R,
        S,
        ko,
        co,
        r_r,
        s_r,
        weight_l2_0_address0,
        weight_l2_0_ce0,
        weight_l2_0_q0,
        weight_l2_1_address0,
        weight_l2_1_ce0,
        weight_l2_1_q0,
        weight_l2_2_address0,
        weight_l2_2_ce0,
        weight_l2_2_q0,
        weight_l2_3_address0,
        weight_l2_3_ce0,
        weight_l2_3_q0,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        ap_return_4,
        ap_return_5,
        ap_return_6,
        ap_return_7,
        ap_return_8,
        ap_return_9,
        ap_return_10,
        ap_return_11,
        ap_return_12,
        ap_return_13,
        ap_return_14,
        ap_return_15
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state13 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [7:0] p_read;
input  [7:0] p_read1;
input  [7:0] p_read2;
input  [7:0] p_read3;
input  [7:0] p_read4;
input  [7:0] p_read5;
input  [7:0] p_read6;
input  [7:0] p_read7;
input  [7:0] p_read8;
input  [7:0] p_read9;
input  [7:0] p_read10;
input  [7:0] p_read11;
input  [7:0] p_read12;
input  [7:0] p_read13;
input  [7:0] p_read14;
input  [7:0] p_read15;
input  [11:0] C;
input  [11:0] R;
input  [11:0] S;
input  [11:0] ko;
input  [9:0] co;
input  [11:0] r_r;
input  [11:0] s_r;
output  [11:0] weight_l2_0_address0;
output   weight_l2_0_ce0;
input  [7:0] weight_l2_0_q0;
output  [11:0] weight_l2_1_address0;
output   weight_l2_1_ce0;
input  [7:0] weight_l2_1_q0;
output  [11:0] weight_l2_2_address0;
output   weight_l2_2_ce0;
input  [7:0] weight_l2_2_q0;
output  [11:0] weight_l2_3_address0;
output   weight_l2_3_ce0;
input  [7:0] weight_l2_3_q0;
output  [7:0] ap_return_0;
output  [7:0] ap_return_1;
output  [7:0] ap_return_2;
output  [7:0] ap_return_3;
output  [7:0] ap_return_4;
output  [7:0] ap_return_5;
output  [7:0] ap_return_6;
output  [7:0] ap_return_7;
output  [7:0] ap_return_8;
output  [7:0] ap_return_9;
output  [7:0] ap_return_10;
output  [7:0] ap_return_11;
output  [7:0] ap_return_12;
output  [7:0] ap_return_13;
output  [7:0] ap_return_14;
output  [7:0] ap_return_15;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg weight_l2_0_ce0;
reg weight_l2_1_ce0;
reg weight_l2_2_ce0;
reg weight_l2_3_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] ci_reg_334;
reg   [0:0] write_flag18_0_reg_346;
reg   [7:0] weight_regfile1520_031_reg_358;
reg   [0:0] write_flag23_0_reg_370;
reg   [7:0] weight_regfile14_030_reg_382;
reg   [7:0] weight_regfile1625_029_reg_394;
reg   [0:0] write_flag27_0_reg_406;
reg   [0:0] write_flag14_0_reg_418;
reg   [7:0] weight_regfile17_028_reg_430;
reg   [0:0] write_flag30_0_reg_442;
reg   [7:0] weight_regfile28_026_reg_454;
reg   [0:0] write_flag34_0_reg_466;
reg   [7:0] weight_regfile2936_025_reg_478;
reg   [0:0] write_flag38_0_reg_490;
reg   [7:0] weight_regfile210_023_reg_502;
reg   [0:0] write_flag41_0_reg_514;
reg   [7:0] weight_regfile211_022_reg_526;
reg   [0:0] write_flag45_0_reg_538;
reg   [7:0] weight_regfile31247_020_reg_550;
reg   [0:0] write_flag49_0_reg_562;
reg   [7:0] weight_regfile313_019_reg_574;
reg   [0:0] write_flag52_0_reg_586;
reg   [7:0] weight_regfile314_017_reg_598;
reg   [0:0] write_flag55_0_reg_610;
reg   [7:0] weight_regfile315_016_reg_622;
wire   [11:0] grp_fu_634_p2;
reg   [11:0] reg_655;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state7_pp0_stage0_iter2;
wire    ap_block_state9_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln44_reg_1478;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state8_pp0_stage1_iter2;
wire    ap_block_state10_pp0_stage1_iter3;
wire    ap_block_state12_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln44_reg_1478_pp0_iter2_reg;
wire    ap_CS_fsm_state2;
wire   [11:0] mul2_fu_679_p3;
reg   [11:0] mul2_reg_1468;
reg   [11:0] mul4_reg_1473;
wire   [0:0] icmp_ln44_fu_687_p2;
reg   [0:0] icmp_ln44_reg_1478_pp0_iter1_reg;
reg   [0:0] icmp_ln44_reg_1478_pp0_iter3_reg;
reg   [0:0] icmp_ln44_reg_1478_pp0_iter4_reg;
wire   [1:0] empty_fu_693_p1;
reg   [1:0] empty_reg_1482;
reg   [1:0] empty_reg_1482_pp0_iter1_reg;
reg   [1:0] empty_reg_1482_pp0_iter2_reg;
reg   [1:0] empty_reg_1482_pp0_iter3_reg;
reg   [1:0] empty_reg_1482_pp0_iter4_reg;
wire  signed [11:0] mul52_fu_706_p2;
reg  signed [11:0] mul52_reg_1510;
wire   [2:0] add_ln44_fu_711_p2;
reg   [2:0] add_ln44_reg_1515;
reg    ap_enable_reg_pp0_iter0;
wire  signed [11:0] add93_fu_717_p2;
reg  signed [11:0] add93_reg_1520;
wire   [11:0] add12_fu_722_p2;
reg   [11:0] add12_reg_1525;
reg   [7:0] weight_l2_1_load_reg_1550;
wire   [0:0] write_flag14_1_fu_774_p6;
reg   [0:0] write_flag14_1_reg_1558;
reg    ap_enable_reg_pp0_iter4;
wire   [0:0] write_flag27_1_fu_787_p6;
reg   [0:0] write_flag27_1_reg_1563;
wire   [0:0] write_flag23_1_fu_800_p6;
reg   [0:0] write_flag23_1_reg_1568;
wire   [0:0] write_flag18_1_fu_813_p6;
reg   [0:0] write_flag18_1_reg_1573;
reg   [7:0] weight_l2_2_load_reg_1578;
wire   [0:0] write_flag41_1_fu_826_p6;
reg   [0:0] write_flag41_1_reg_1586;
wire   [0:0] write_flag38_1_fu_839_p6;
reg   [0:0] write_flag38_1_reg_1591;
wire   [0:0] write_flag34_1_fu_852_p6;
reg   [0:0] write_flag34_1_reg_1596;
wire   [0:0] write_flag30_1_fu_865_p6;
reg   [0:0] write_flag30_1_reg_1601;
reg   [7:0] weight_l2_3_load_reg_1606;
wire   [0:0] write_flag55_1_fu_878_p6;
reg   [0:0] write_flag55_1_reg_1614;
wire   [0:0] write_flag52_1_fu_891_p6;
reg   [0:0] write_flag52_1_reg_1619;
wire   [0:0] write_flag49_1_fu_904_p6;
reg   [0:0] write_flag49_1_reg_1624;
wire   [0:0] write_flag45_1_fu_917_p6;
reg   [0:0] write_flag45_1_reg_1629;
wire   [7:0] weight_regfile17_1_fu_930_p6;
wire   [7:0] weight_regfile1625_1_fu_942_p6;
wire   [7:0] weight_regfile14_1_fu_954_p6;
wire   [7:0] weight_regfile1520_1_fu_966_p6;
wire   [7:0] weight_regfile211_1_fu_978_p6;
wire   [7:0] weight_regfile210_1_fu_990_p6;
wire   [7:0] weight_regfile2936_1_fu_1002_p6;
wire   [7:0] weight_regfile28_1_fu_1014_p6;
wire   [7:0] weight_regfile315_1_fu_1026_p6;
wire   [7:0] weight_regfile314_1_fu_1038_p6;
wire   [7:0] weight_regfile313_1_fu_1050_p6;
wire   [7:0] weight_regfile31247_1_fu_1062_p6;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_flush_enable;
wire    ap_block_pp0_stage0_subdone;
reg    ap_enable_reg_pp0_iter3;
reg   [2:0] ap_phi_mux_ci_phi_fu_338_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] idxprom13_fu_727_p1;
wire    ap_block_pp0_stage1;
reg   [0:0] write_flag_0_fu_112;
wire    ap_CS_fsm_state13;
reg   [7:0] weight_regfile_018_fu_116;
reg   [0:0] write_flag4_0_fu_120;
reg   [7:0] weight_regfile16_021_fu_124;
reg   [0:0] write_flag8_0_fu_128;
reg   [7:0] weight_regfile2_024_fu_132;
reg   [0:0] write_flag11_0_fu_136;
reg   [7:0] weight_regfile3_027_fu_140;
reg  signed [11:0] grp_fu_634_p0;
reg  signed [11:0] grp_fu_634_p1;
wire   [11:0] ci_cast_cast_fu_697_p1;
wire   [11:0] tmp_fu_701_p2;
wire   [7:0] select_ln54_fu_1098_p3;
wire   [7:0] select_ln54_1_fu_1105_p3;
wire   [7:0] select_ln54_2_fu_1112_p3;
wire   [7:0] select_ln54_3_fu_1119_p3;
wire   [7:0] select_ln54_4_fu_1126_p3;
wire   [7:0] select_ln54_5_fu_1133_p3;
wire   [7:0] select_ln54_6_fu_1140_p3;
wire   [7:0] select_ln54_7_fu_1147_p3;
wire   [7:0] select_ln54_8_fu_1154_p3;
wire   [7:0] select_ln54_9_fu_1161_p3;
wire   [7:0] select_ln54_10_fu_1168_p3;
wire   [7:0] select_ln54_11_fu_1175_p3;
wire   [7:0] select_ln54_12_fu_1182_p3;
wire   [7:0] select_ln54_13_fu_1189_p3;
wire   [7:0] select_ln54_14_fu_1196_p3;
wire   [7:0] select_ln54_15_fu_1203_p3;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

Conv_sysarr_mul_12s_12s_12_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 12 ),
    .dout_WIDTH( 12 ))
mul_12s_12s_12_2_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_634_p0),
    .din1(grp_fu_634_p1),
    .ce(1'b1),
    .dout(grp_fu_634_p2)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U60(
    .din0(1'd1),
    .din1(write_flag14_0_reg_418),
    .din2(write_flag14_0_reg_418),
    .din3(write_flag14_0_reg_418),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag14_1_fu_774_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U61(
    .din0(write_flag27_0_reg_406),
    .din1(write_flag27_0_reg_406),
    .din2(write_flag27_0_reg_406),
    .din3(1'd1),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag27_1_fu_787_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U62(
    .din0(write_flag23_0_reg_370),
    .din1(write_flag23_0_reg_370),
    .din2(1'd1),
    .din3(write_flag23_0_reg_370),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag23_1_fu_800_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U63(
    .din0(write_flag18_0_reg_346),
    .din1(1'd1),
    .din2(write_flag18_0_reg_346),
    .din3(write_flag18_0_reg_346),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag18_1_fu_813_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U64(
    .din0(write_flag41_0_reg_514),
    .din1(write_flag41_0_reg_514),
    .din2(write_flag41_0_reg_514),
    .din3(1'd1),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag41_1_fu_826_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U65(
    .din0(write_flag38_0_reg_490),
    .din1(write_flag38_0_reg_490),
    .din2(1'd1),
    .din3(write_flag38_0_reg_490),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag38_1_fu_839_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U66(
    .din0(write_flag34_0_reg_466),
    .din1(1'd1),
    .din2(write_flag34_0_reg_466),
    .din3(write_flag34_0_reg_466),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag34_1_fu_852_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U67(
    .din0(1'd1),
    .din1(write_flag30_0_reg_442),
    .din2(write_flag30_0_reg_442),
    .din3(write_flag30_0_reg_442),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag30_1_fu_865_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U68(
    .din0(write_flag55_0_reg_610),
    .din1(write_flag55_0_reg_610),
    .din2(write_flag55_0_reg_610),
    .din3(1'd1),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag55_1_fu_878_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U69(
    .din0(write_flag52_0_reg_586),
    .din1(write_flag52_0_reg_586),
    .din2(1'd1),
    .din3(write_flag52_0_reg_586),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag52_1_fu_891_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U70(
    .din0(write_flag49_0_reg_562),
    .din1(1'd1),
    .din2(write_flag49_0_reg_562),
    .din3(write_flag49_0_reg_562),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag49_1_fu_904_p6)
);

Conv_sysarr_mux_42_1_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
mux_42_1_1_1_U71(
    .din0(1'd1),
    .din1(write_flag45_0_reg_538),
    .din2(write_flag45_0_reg_538),
    .din3(write_flag45_0_reg_538),
    .din4(empty_reg_1482_pp0_iter3_reg),
    .dout(write_flag45_1_fu_917_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U72(
    .din0(weight_regfile17_028_reg_430),
    .din1(weight_regfile17_028_reg_430),
    .din2(weight_regfile17_028_reg_430),
    .din3(weight_l2_1_load_reg_1550),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile17_1_fu_930_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U73(
    .din0(weight_regfile1625_029_reg_394),
    .din1(weight_regfile1625_029_reg_394),
    .din2(weight_l2_1_load_reg_1550),
    .din3(weight_regfile1625_029_reg_394),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile1625_1_fu_942_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U74(
    .din0(weight_l2_1_load_reg_1550),
    .din1(weight_regfile14_030_reg_382),
    .din2(weight_regfile14_030_reg_382),
    .din3(weight_regfile14_030_reg_382),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile14_1_fu_954_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U75(
    .din0(weight_regfile1520_031_reg_358),
    .din1(weight_l2_1_load_reg_1550),
    .din2(weight_regfile1520_031_reg_358),
    .din3(weight_regfile1520_031_reg_358),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile1520_1_fu_966_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U76(
    .din0(weight_regfile211_022_reg_526),
    .din1(weight_regfile211_022_reg_526),
    .din2(weight_regfile211_022_reg_526),
    .din3(weight_l2_2_load_reg_1578),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile211_1_fu_978_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U77(
    .din0(weight_regfile210_023_reg_502),
    .din1(weight_regfile210_023_reg_502),
    .din2(weight_l2_2_load_reg_1578),
    .din3(weight_regfile210_023_reg_502),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile210_1_fu_990_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U78(
    .din0(weight_regfile2936_025_reg_478),
    .din1(weight_l2_2_load_reg_1578),
    .din2(weight_regfile2936_025_reg_478),
    .din3(weight_regfile2936_025_reg_478),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile2936_1_fu_1002_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U79(
    .din0(weight_l2_2_load_reg_1578),
    .din1(weight_regfile28_026_reg_454),
    .din2(weight_regfile28_026_reg_454),
    .din3(weight_regfile28_026_reg_454),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile28_1_fu_1014_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U80(
    .din0(weight_regfile315_016_reg_622),
    .din1(weight_regfile315_016_reg_622),
    .din2(weight_regfile315_016_reg_622),
    .din3(weight_l2_3_load_reg_1606),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile315_1_fu_1026_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U81(
    .din0(weight_regfile314_017_reg_598),
    .din1(weight_regfile314_017_reg_598),
    .din2(weight_l2_3_load_reg_1606),
    .din3(weight_regfile314_017_reg_598),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile314_1_fu_1038_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U82(
    .din0(weight_regfile313_019_reg_574),
    .din1(weight_l2_3_load_reg_1606),
    .din2(weight_regfile313_019_reg_574),
    .din3(weight_regfile313_019_reg_574),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile313_1_fu_1050_p6)
);

Conv_sysarr_mux_42_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .din3_WIDTH( 8 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 8 ))
mux_42_8_1_1_U83(
    .din0(weight_l2_3_load_reg_1606),
    .din1(weight_regfile31247_020_reg_550),
    .din2(weight_regfile31247_020_reg_550),
    .din3(weight_regfile31247_020_reg_550),
    .din4(empty_reg_1482_pp0_iter4_reg),
    .dout(weight_regfile31247_1_fu_1062_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_pp0_flush_enable)) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter3 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_reg_1478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ci_reg_334 <= add_ln44_reg_1515;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        ci_reg_334 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd3) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag11_0_fu_136 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag11_0_fu_136 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag14_0_reg_418 <= write_flag14_1_reg_1558;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag14_0_reg_418 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag18_0_reg_346 <= write_flag18_1_reg_1573;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag18_0_reg_346 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag23_0_reg_370 <= write_flag23_1_reg_1568;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag23_0_reg_370 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag27_0_reg_406 <= write_flag27_1_reg_1563;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag27_0_reg_406 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag30_0_reg_442 <= write_flag30_1_reg_1601;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag30_0_reg_442 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag34_0_reg_466 <= write_flag34_1_reg_1596;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag34_0_reg_466 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag38_0_reg_490 <= write_flag38_1_reg_1591;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag38_0_reg_490 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag41_0_reg_514 <= write_flag41_1_reg_1586;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag41_0_reg_514 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag45_0_reg_538 <= write_flag45_1_reg_1629;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag45_0_reg_538 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag49_0_reg_562 <= write_flag49_1_reg_1624;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag49_0_reg_562 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd1) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag4_0_fu_120 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag4_0_fu_120 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag52_0_reg_586 <= write_flag52_1_reg_1619;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag52_0_reg_586 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        write_flag55_0_reg_610 <= write_flag55_1_reg_1614;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        write_flag55_0_reg_610 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd2) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag8_0_fu_128 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag8_0_fu_128 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd0) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag_0_fu_112 <= 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        write_flag_0_fu_112 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_reg_1478_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add12_reg_1525 <= add12_fu_722_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_1478_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add93_reg_1520 <= add93_fu_717_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln44_reg_1515 <= add_ln44_fu_711_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_fu_687_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_1482 <= empty_fu_693_p1;
        mul52_reg_1510 <= mul52_fu_706_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        empty_reg_1482_pp0_iter1_reg <= empty_reg_1482;
        empty_reg_1482_pp0_iter2_reg <= empty_reg_1482_pp0_iter1_reg;
        empty_reg_1482_pp0_iter3_reg <= empty_reg_1482_pp0_iter2_reg;
        empty_reg_1482_pp0_iter4_reg <= empty_reg_1482_pp0_iter3_reg;
        icmp_ln44_reg_1478 <= icmp_ln44_fu_687_p2;
        icmp_ln44_reg_1478_pp0_iter1_reg <= icmp_ln44_reg_1478;
        icmp_ln44_reg_1478_pp0_iter2_reg <= icmp_ln44_reg_1478_pp0_iter1_reg;
        icmp_ln44_reg_1478_pp0_iter3_reg <= icmp_ln44_reg_1478_pp0_iter2_reg;
        icmp_ln44_reg_1478_pp0_iter4_reg <= icmp_ln44_reg_1478_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        mul2_reg_1468[11 : 2] <= mul2_fu_679_p3[11 : 2];
        mul4_reg_1473 <= grp_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_reg_1478_pp0_iter2_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_reg_1478 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_655 <= grp_fu_634_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_l2_1_load_reg_1550 <= weight_l2_1_q0;
        weight_l2_2_load_reg_1578 <= weight_l2_2_q0;
        weight_l2_3_load_reg_1606 <= weight_l2_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        weight_regfile14_030_reg_382 <= weight_regfile14_1_fu_954_p6;
        weight_regfile1520_031_reg_358 <= weight_regfile1520_1_fu_966_p6;
        weight_regfile1625_029_reg_394 <= weight_regfile1625_1_fu_942_p6;
        weight_regfile17_028_reg_430 <= weight_regfile17_1_fu_930_p6;
        weight_regfile210_023_reg_502 <= weight_regfile210_1_fu_990_p6;
        weight_regfile211_022_reg_526 <= weight_regfile211_1_fu_978_p6;
        weight_regfile28_026_reg_454 <= weight_regfile28_1_fu_1014_p6;
        weight_regfile2936_025_reg_478 <= weight_regfile2936_1_fu_1002_p6;
        weight_regfile31247_020_reg_550 <= weight_regfile31247_1_fu_1062_p6;
        weight_regfile313_019_reg_574 <= weight_regfile313_1_fu_1050_p6;
        weight_regfile314_017_reg_598 <= weight_regfile314_1_fu_1038_p6;
        weight_regfile315_016_reg_622 <= weight_regfile315_1_fu_1026_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd1) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile16_021_fu_124 <= weight_l2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd2) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile2_024_fu_132 <= weight_l2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd3) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile3_027_fu_140 <= weight_l2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (empty_reg_1482_pp0_iter3_reg == 2'd0) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        weight_regfile_018_fu_116 <= weight_l2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln44_reg_1478_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        write_flag14_1_reg_1558 <= write_flag14_1_fu_774_p6;
        write_flag18_1_reg_1573 <= write_flag18_1_fu_813_p6;
        write_flag23_1_reg_1568 <= write_flag23_1_fu_800_p6;
        write_flag27_1_reg_1563 <= write_flag27_1_fu_787_p6;
        write_flag30_1_reg_1601 <= write_flag30_1_fu_865_p6;
        write_flag34_1_reg_1596 <= write_flag34_1_fu_852_p6;
        write_flag38_1_reg_1591 <= write_flag38_1_fu_839_p6;
        write_flag41_1_reg_1586 <= write_flag41_1_fu_826_p6;
        write_flag45_1_reg_1629 <= write_flag45_1_fu_917_p6;
        write_flag49_1_reg_1624 <= write_flag49_1_fu_904_p6;
        write_flag52_1_reg_1619 <= write_flag52_1_fu_891_p6;
        write_flag55_1_reg_1614 <= write_flag55_1_fu_878_p6;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_reg_1478 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_pp0_flush_enable = 1'b1;
    end else begin
        ap_condition_pp0_flush_enable = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln44_reg_1478 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ci_phi_fu_338_p4 = add_ln44_reg_1515;
    end else begin
        ap_phi_mux_ci_phi_fu_338_p4 = ci_reg_334;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_634_p0 = S;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_634_p0 = R;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_634_p0 = C;
    end else begin
        grp_fu_634_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_634_p1 = add93_reg_1520;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_634_p1 = mul52_reg_1510;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_634_p1 = ko;
    end else begin
        grp_fu_634_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        weight_l2_0_ce0 = 1'b1;
    end else begin
        weight_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        weight_l2_1_ce0 = 1'b1;
    end else begin
        weight_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        weight_l2_2_ce0 = 1'b1;
    end else begin
        weight_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        weight_l2_3_ce0 = 1'b1;
    end else begin
        weight_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add12_fu_722_p2 = (s_r + reg_655);

assign add93_fu_717_p2 = (r_r + reg_655);

assign add_ln44_fu_711_p2 = (ci_reg_334 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return_0 = select_ln54_fu_1098_p3;

assign ap_return_1 = select_ln54_1_fu_1105_p3;

assign ap_return_10 = select_ln54_10_fu_1168_p3;

assign ap_return_11 = select_ln54_11_fu_1175_p3;

assign ap_return_12 = select_ln54_12_fu_1182_p3;

assign ap_return_13 = select_ln54_13_fu_1189_p3;

assign ap_return_14 = select_ln54_14_fu_1196_p3;

assign ap_return_15 = select_ln54_15_fu_1203_p3;

assign ap_return_2 = select_ln54_2_fu_1112_p3;

assign ap_return_3 = select_ln54_3_fu_1119_p3;

assign ap_return_4 = select_ln54_4_fu_1126_p3;

assign ap_return_5 = select_ln54_5_fu_1133_p3;

assign ap_return_6 = select_ln54_6_fu_1140_p3;

assign ap_return_7 = select_ln54_7_fu_1147_p3;

assign ap_return_8 = select_ln54_8_fu_1154_p3;

assign ap_return_9 = select_ln54_9_fu_1161_p3;

assign ci_cast_cast_fu_697_p1 = empty_fu_693_p1;

assign empty_fu_693_p1 = ap_phi_mux_ci_phi_fu_338_p4[1:0];

assign icmp_ln44_fu_687_p2 = ((ap_phi_mux_ci_phi_fu_338_p4 == 3'd4) ? 1'b1 : 1'b0);

assign idxprom13_fu_727_p1 = add12_reg_1525;

assign mul2_fu_679_p3 = {{co}, {2'd0}};

assign mul52_fu_706_p2 = (tmp_fu_701_p2 + mul2_reg_1468);

assign select_ln54_10_fu_1168_p3 = ((write_flag38_0_reg_490[0:0] === 1'b1) ? weight_regfile210_023_reg_502 : p_read10);

assign select_ln54_11_fu_1175_p3 = ((write_flag41_0_reg_514[0:0] === 1'b1) ? weight_regfile211_022_reg_526 : p_read11);

assign select_ln54_12_fu_1182_p3 = ((write_flag45_0_reg_538[0:0] === 1'b1) ? weight_regfile31247_020_reg_550 : p_read12);

assign select_ln54_13_fu_1189_p3 = ((write_flag49_0_reg_562[0:0] === 1'b1) ? weight_regfile313_019_reg_574 : p_read13);

assign select_ln54_14_fu_1196_p3 = ((write_flag52_0_reg_586[0:0] === 1'b1) ? weight_regfile314_017_reg_598 : p_read14);

assign select_ln54_15_fu_1203_p3 = ((write_flag55_0_reg_610[0:0] === 1'b1) ? weight_regfile315_016_reg_622 : p_read15);

assign select_ln54_1_fu_1105_p3 = ((write_flag4_0_fu_120[0:0] === 1'b1) ? weight_regfile16_021_fu_124 : p_read1);

assign select_ln54_2_fu_1112_p3 = ((write_flag8_0_fu_128[0:0] === 1'b1) ? weight_regfile2_024_fu_132 : p_read2);

assign select_ln54_3_fu_1119_p3 = ((write_flag11_0_fu_136[0:0] === 1'b1) ? weight_regfile3_027_fu_140 : p_read3);

assign select_ln54_4_fu_1126_p3 = ((write_flag14_0_reg_418[0:0] === 1'b1) ? weight_regfile14_030_reg_382 : p_read4);

assign select_ln54_5_fu_1133_p3 = ((write_flag18_0_reg_346[0:0] === 1'b1) ? weight_regfile1520_031_reg_358 : p_read5);

assign select_ln54_6_fu_1140_p3 = ((write_flag23_0_reg_370[0:0] === 1'b1) ? weight_regfile1625_029_reg_394 : p_read6);

assign select_ln54_7_fu_1147_p3 = ((write_flag27_0_reg_406[0:0] === 1'b1) ? weight_regfile17_028_reg_430 : p_read7);

assign select_ln54_8_fu_1154_p3 = ((write_flag30_0_reg_442[0:0] === 1'b1) ? weight_regfile28_026_reg_454 : p_read8);

assign select_ln54_9_fu_1161_p3 = ((write_flag34_0_reg_466[0:0] === 1'b1) ? weight_regfile2936_025_reg_478 : p_read9);

assign select_ln54_fu_1098_p3 = ((write_flag_0_fu_112[0:0] === 1'b1) ? weight_regfile_018_fu_116 : p_read);

assign tmp_fu_701_p2 = (mul4_reg_1473 + ci_cast_cast_fu_697_p1);

assign weight_l2_0_address0 = idxprom13_fu_727_p1;

assign weight_l2_1_address0 = idxprom13_fu_727_p1;

assign weight_l2_2_address0 = idxprom13_fu_727_p1;

assign weight_l2_3_address0 = idxprom13_fu_727_p1;

always @ (posedge ap_clk) begin
    mul2_reg_1468[1:0] <= 2'b00;
end

endmodule //Conv_sysarr_runWeight2Reg
