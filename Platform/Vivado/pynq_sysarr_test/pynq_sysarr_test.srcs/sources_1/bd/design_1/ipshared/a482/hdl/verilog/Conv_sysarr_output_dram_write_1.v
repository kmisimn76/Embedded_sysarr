// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_output_dram_write_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dma_control_AWVALID,
        m_axi_dma_control_AWREADY,
        m_axi_dma_control_AWADDR,
        m_axi_dma_control_AWID,
        m_axi_dma_control_AWLEN,
        m_axi_dma_control_AWSIZE,
        m_axi_dma_control_AWBURST,
        m_axi_dma_control_AWLOCK,
        m_axi_dma_control_AWCACHE,
        m_axi_dma_control_AWPROT,
        m_axi_dma_control_AWQOS,
        m_axi_dma_control_AWREGION,
        m_axi_dma_control_AWUSER,
        m_axi_dma_control_WVALID,
        m_axi_dma_control_WREADY,
        m_axi_dma_control_WDATA,
        m_axi_dma_control_WSTRB,
        m_axi_dma_control_WLAST,
        m_axi_dma_control_WID,
        m_axi_dma_control_WUSER,
        m_axi_dma_control_ARVALID,
        m_axi_dma_control_ARREADY,
        m_axi_dma_control_ARADDR,
        m_axi_dma_control_ARID,
        m_axi_dma_control_ARLEN,
        m_axi_dma_control_ARSIZE,
        m_axi_dma_control_ARBURST,
        m_axi_dma_control_ARLOCK,
        m_axi_dma_control_ARCACHE,
        m_axi_dma_control_ARPROT,
        m_axi_dma_control_ARQOS,
        m_axi_dma_control_ARREGION,
        m_axi_dma_control_ARUSER,
        m_axi_dma_control_RVALID,
        m_axi_dma_control_RREADY,
        m_axi_dma_control_RDATA,
        m_axi_dma_control_RLAST,
        m_axi_dma_control_RID,
        m_axi_dma_control_RUSER,
        m_axi_dma_control_RRESP,
        m_axi_dma_control_BVALID,
        m_axi_dma_control_BREADY,
        m_axi_dma_control_BRESP,
        m_axi_dma_control_BID,
        m_axi_dma_control_BUSER,
        output_addr,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TLAST,
        out_data_TDATA,
        out_data_TVALID,
        out_data_TREADY,
        out_data_TKEEP,
        out_data_TSTRB,
        out_data_TLAST,
        out_responsed,
        wmo,
        K_L2,
        H_L2,
        W_L2,
        output_l2_0_address0,
        output_l2_0_ce0,
        output_l2_0_q0,
        output_l2_1_address0,
        output_l2_1_ce0,
        output_l2_1_q0,
        output_l2_2_address0,
        output_l2_2_ce0,
        output_l2_2_q0,
        output_l2_3_address0,
        output_l2_3_ce0,
        output_l2_3_q0
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dma_control_AWVALID;
input   m_axi_dma_control_AWREADY;
output  [31:0] m_axi_dma_control_AWADDR;
output  [0:0] m_axi_dma_control_AWID;
output  [31:0] m_axi_dma_control_AWLEN;
output  [2:0] m_axi_dma_control_AWSIZE;
output  [1:0] m_axi_dma_control_AWBURST;
output  [1:0] m_axi_dma_control_AWLOCK;
output  [3:0] m_axi_dma_control_AWCACHE;
output  [2:0] m_axi_dma_control_AWPROT;
output  [3:0] m_axi_dma_control_AWQOS;
output  [3:0] m_axi_dma_control_AWREGION;
output  [0:0] m_axi_dma_control_AWUSER;
output   m_axi_dma_control_WVALID;
input   m_axi_dma_control_WREADY;
output  [31:0] m_axi_dma_control_WDATA;
output  [3:0] m_axi_dma_control_WSTRB;
output   m_axi_dma_control_WLAST;
output  [0:0] m_axi_dma_control_WID;
output  [0:0] m_axi_dma_control_WUSER;
output   m_axi_dma_control_ARVALID;
input   m_axi_dma_control_ARREADY;
output  [31:0] m_axi_dma_control_ARADDR;
output  [0:0] m_axi_dma_control_ARID;
output  [31:0] m_axi_dma_control_ARLEN;
output  [2:0] m_axi_dma_control_ARSIZE;
output  [1:0] m_axi_dma_control_ARBURST;
output  [1:0] m_axi_dma_control_ARLOCK;
output  [3:0] m_axi_dma_control_ARCACHE;
output  [2:0] m_axi_dma_control_ARPROT;
output  [3:0] m_axi_dma_control_ARQOS;
output  [3:0] m_axi_dma_control_ARREGION;
output  [0:0] m_axi_dma_control_ARUSER;
input   m_axi_dma_control_RVALID;
output   m_axi_dma_control_RREADY;
input  [31:0] m_axi_dma_control_RDATA;
input   m_axi_dma_control_RLAST;
input  [0:0] m_axi_dma_control_RID;
input  [0:0] m_axi_dma_control_RUSER;
input  [1:0] m_axi_dma_control_RRESP;
input   m_axi_dma_control_BVALID;
output   m_axi_dma_control_BREADY;
input  [1:0] m_axi_dma_control_BRESP;
input  [0:0] m_axi_dma_control_BID;
input  [0:0] m_axi_dma_control_BUSER;
input  [31:0] output_addr;
input  [7:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [0:0] in_data_TKEEP;
input  [0:0] in_data_TSTRB;
input  [0:0] in_data_TLAST;
output  [7:0] out_data_TDATA;
output   out_data_TVALID;
input   out_data_TREADY;
output  [0:0] out_data_TKEEP;
output  [0:0] out_data_TSTRB;
output  [0:0] out_data_TLAST;
input  [0:0] out_responsed;
input  [11:0] wmo;
input  [31:0] K_L2;
input  [31:0] H_L2;
input  [31:0] W_L2;
output  [10:0] output_l2_0_address0;
output   output_l2_0_ce0;
input  [31:0] output_l2_0_q0;
output  [10:0] output_l2_1_address0;
output   output_l2_1_ce0;
input  [31:0] output_l2_1_q0;
output  [10:0] output_l2_2_address0;
output   output_l2_2_ce0;
input  [31:0] output_l2_2_q0;
output  [10:0] output_l2_3_address0;
output   output_l2_3_ce0;
input  [31:0] output_l2_3_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dma_control_AWVALID;
reg[31:0] m_axi_dma_control_AWADDR;
reg[0:0] m_axi_dma_control_AWID;
reg[31:0] m_axi_dma_control_AWLEN;
reg[2:0] m_axi_dma_control_AWSIZE;
reg[1:0] m_axi_dma_control_AWBURST;
reg[1:0] m_axi_dma_control_AWLOCK;
reg[3:0] m_axi_dma_control_AWCACHE;
reg[2:0] m_axi_dma_control_AWPROT;
reg[3:0] m_axi_dma_control_AWQOS;
reg[3:0] m_axi_dma_control_AWREGION;
reg[0:0] m_axi_dma_control_AWUSER;
reg m_axi_dma_control_WVALID;
reg[31:0] m_axi_dma_control_WDATA;
reg[3:0] m_axi_dma_control_WSTRB;
reg m_axi_dma_control_WLAST;
reg[0:0] m_axi_dma_control_WID;
reg[0:0] m_axi_dma_control_WUSER;
reg m_axi_dma_control_BREADY;
reg in_data_TREADY;
reg[7:0] out_data_TDATA;
reg out_data_TVALID;
reg[0:0] out_data_TLAST;
reg output_l2_0_ce0;
reg output_l2_1_ce0;
reg output_l2_2_ce0;
reg output_l2_3_ce0;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dma_control_blk_n_AW;
wire    ap_CS_fsm_state10;
reg    dma_control_blk_n_W;
wire    ap_CS_fsm_state11;
reg    dma_control_blk_n_B;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state19;
reg    in_data_TDATA_blk_n;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
reg    out_data_TDATA_blk_n;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire   [61:0] grp_fu_453_p2;
reg   [61:0] reg_484;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire  signed [10:0] empty_fu_488_p1;
reg  signed [10:0] empty_reg_852;
wire  signed [11:0] empty_89_fu_492_p1;
wire    ap_CS_fsm_state2;
wire  signed [10:0] empty_88_fu_497_p1;
reg  signed [10:0] empty_88_reg_867;
wire   [61:0] cast_fu_511_p1;
wire   [61:0] cast1_fu_516_p1;
wire   [0:0] out_responsed_read_read_fu_202_p2;
wire   [31:0] empty_90_fu_529_p2;
reg   [31:0] empty_90_reg_886;
wire   [0:0] cmp14102_fu_534_p2;
reg   [0:0] cmp14102_reg_892;
wire   [31:0] add_ln350_fu_543_p2;
reg   [31:0] add_ln350_reg_896;
wire   [61:0] add_ln341_fu_579_p2;
reg   [61:0] add_ln341_reg_929;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln343_fu_591_p2;
reg   [0:0] icmp_ln343_reg_934;
wire   [0:0] icmp_ln341_fu_573_p2;
wire   [29:0] select_ln341_1_fu_596_p3;
reg   [29:0] select_ln341_1_reg_939;
wire  signed [10:0] trunc_ln341_fu_604_p1;
reg  signed [10:0] trunc_ln341_reg_944;
reg   [10:0] mul_ln341_reg_949;
wire   [31:0] select_ln341_fu_608_p3;
reg   [31:0] select_ln341_reg_954;
wire   [10:0] trunc_ln343_fu_615_p1;
reg   [10:0] trunc_ln343_reg_959;
wire   [6:0] tmp_3_cast_fu_623_p3;
reg   [6:0] tmp_3_cast_reg_964;
wire    ap_CS_fsm_state20;
wire   [31:0] add_ln356_fu_636_p2;
reg   [31:0] add_ln356_reg_972;
wire  signed [10:0] mul491_fu_642_p2;
reg  signed [10:0] mul491_reg_977;
wire   [0:0] icmp_ln356_fu_631_p2;
reg   [6:0] stream_buffer_addr_reg_982;
wire    ap_CS_fsm_state21;
wire   [2:0] add_ln359_fu_666_p2;
reg   [2:0] add_ln359_reg_990;
reg   [10:0] add51_reg_995;
wire    ap_CS_fsm_state32;
wire   [6:0] tmp_4_cast_fu_681_p3;
reg   [6:0] tmp_4_cast_reg_1000;
wire    ap_CS_fsm_state33;
wire   [31:0] add_ln371_fu_694_p2;
reg   [31:0] add_ln371_reg_1008;
reg   [10:0] output_l2_0_addr_reg_1013;
wire   [0:0] icmp_ln371_fu_689_p2;
reg   [10:0] output_l2_1_addr_reg_1018;
reg   [10:0] output_l2_2_addr_reg_1023;
reg   [10:0] output_l2_3_addr_reg_1028;
reg   [6:0] stream_buffer_addr_1_reg_1033;
wire    ap_CS_fsm_state34;
wire   [2:0] add_ln374_fu_737_p2;
reg   [2:0] add_ln374_reg_1041;
reg   [31:0] output_l2_0_load_reg_1046;
wire    ap_CS_fsm_state35;
reg   [31:0] output_l2_1_load_reg_1051;
reg   [31:0] output_l2_2_load_reg_1056;
reg   [31:0] output_l2_3_load_reg_1061;
wire   [7:0] stream_buffer_q0;
reg  signed [7:0] stream_buffer_load_reg_1066;
wire    ap_CS_fsm_state36;
wire   [31:0] tmp_fu_747_p6;
reg   [31:0] tmp_reg_1074;
wire   [7:0] trunc_ln377_2_fu_757_p1;
reg   [7:0] trunc_ln377_2_reg_1079;
wire   [15:0] trunc_ln377_3_fu_761_p1;
reg   [15:0] trunc_ln377_3_reg_1084;
wire   [23:0] trunc_ln377_4_fu_765_p1;
reg   [23:0] trunc_ln377_4_reg_1089;
wire   [0:0] tmp_last_V_fu_769_p2;
reg   [0:0] tmp_last_V_reg_1094;
reg   [7:0] tmp_data_V_1_reg_1099;
reg   [7:0] tmp_data_V_2_reg_1104;
reg   [7:0] tmp_data_V_3_reg_1109;
wire   [31:0] h_1_fu_834_p2;
reg   [31:0] h_1_reg_1114;
wire    ap_CS_fsm_state42;
reg   [6:0] stream_buffer_address0;
reg    stream_buffer_ce0;
reg    stream_buffer_we0;
wire    grp_write_s2mm_1_fu_475_ap_start;
wire    grp_write_s2mm_1_fu_475_ap_done;
wire    grp_write_s2mm_1_fu_475_ap_idle;
wire    grp_write_s2mm_1_fu_475_ap_ready;
wire    grp_write_s2mm_1_fu_475_m_axi_dma_control_AWVALID;
wire   [31:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWADDR;
wire   [0:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWID;
wire   [31:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWLEN;
wire   [2:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWSIZE;
wire   [1:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWBURST;
wire   [1:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWLOCK;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWCACHE;
wire   [2:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWPROT;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWQOS;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWREGION;
wire   [0:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_AWUSER;
wire    grp_write_s2mm_1_fu_475_m_axi_dma_control_WVALID;
wire   [31:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_WDATA;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_WSTRB;
wire    grp_write_s2mm_1_fu_475_m_axi_dma_control_WLAST;
wire   [0:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_WID;
wire   [0:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_WUSER;
wire    grp_write_s2mm_1_fu_475_m_axi_dma_control_ARVALID;
wire   [31:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARADDR;
wire   [0:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARID;
wire   [31:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARLEN;
wire   [2:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARSIZE;
wire   [1:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARBURST;
wire   [1:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARLOCK;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARCACHE;
wire   [2:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARPROT;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARQOS;
wire   [3:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARREGION;
wire   [0:0] grp_write_s2mm_1_fu_475_m_axi_dma_control_ARUSER;
wire    grp_write_s2mm_1_fu_475_m_axi_dma_control_RREADY;
wire    grp_write_s2mm_1_fu_475_m_axi_dma_control_BREADY;
reg   [12:0] grp_write_s2mm_1_fu_475_signal_r;
reg   [61:0] indvar_flatten_reg_374;
wire    ap_CS_fsm_state45;
reg   [29:0] ko_reg_385;
reg   [31:0] h_reg_396;
reg   [31:0] w_reg_408;
wire   [0:0] icmp_ln359_fu_660_p2;
reg   [2:0] ki_reg_419;
reg   [31:0] w_1_reg_430;
wire   [0:0] icmp_ln374_fu_731_p2;
reg   [2:0] ki_1_reg_441;
reg    grp_write_s2mm_1_fu_475_ap_start_reg;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state43;
wire   [63:0] zext_ln368_1_fu_655_p1;
wire   [63:0] idxprom57_fu_709_p1;
wire   [63:0] zext_ln377_1_fu_726_p1;
reg    ap_block_state11_io;
reg    ap_block_state12_io;
reg    ap_block_state13_io;
wire   [7:0] tmp_data_V_fu_799_p2;
reg  signed [32:0] grp_fu_453_p0;
reg  signed [30:0] grp_fu_453_p1;
wire    ap_CS_fsm_state26;
wire   [29:0] div_cast_fu_501_p4;
wire   [11:0] addr_fu_521_p1;
wire   [15:0] addr_fu_521_p3;
wire  signed [31:0] sext_ln350_fu_539_p1;
wire   [29:0] ko_2_fu_585_p2;
wire   [4:0] trunc_ln368_fu_619_p1;
wire   [6:0] zext_ln368_fu_646_p1;
wire   [6:0] add_ln368_fu_650_p2;
wire   [4:0] trunc_ln377_fu_677_p1;
wire   [10:0] empty_95_fu_700_p1;
wire   [10:0] khw_fu_704_p2;
wire   [6:0] zext_ln377_fu_717_p1;
wire   [6:0] add_ln377_fu_721_p2;
wire   [1:0] tmp_fu_747_p5;
wire  signed [31:0] sext_ln377_fu_775_p1;
wire  signed [23:0] sext_ln377_2_fu_781_p1;
wire  signed [15:0] sext_ln377_1_fu_778_p1;
wire   [15:0] add_ln377_2_fu_794_p2;
wire   [23:0] add_ln377_1_fu_789_p2;
wire   [31:0] write_data_fu_784_p2;
reg    grp_fu_453_ce;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
reg   [44:0] ap_NS_fsm;
wire    ap_CS_fsm_state41;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 grp_write_s2mm_1_fu_475_ap_start_reg = 1'b0;
end

Conv_sysarr_output_dram_write_1_stream_buffer #(
    .DataWidth( 8 ),
    .AddressRange( 128 ),
    .AddressWidth( 7 ))
stream_buffer_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(stream_buffer_address0),
    .ce0(stream_buffer_ce0),
    .we0(stream_buffer_we0),
    .d0(in_data_TDATA),
    .q0(stream_buffer_q0)
);

Conv_sysarr_write_s2mm_1 grp_write_s2mm_1_fu_475(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_write_s2mm_1_fu_475_ap_start),
    .ap_done(grp_write_s2mm_1_fu_475_ap_done),
    .ap_idle(grp_write_s2mm_1_fu_475_ap_idle),
    .ap_ready(grp_write_s2mm_1_fu_475_ap_ready),
    .m_axi_dma_control_AWVALID(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWVALID),
    .m_axi_dma_control_AWREADY(m_axi_dma_control_AWREADY),
    .m_axi_dma_control_AWADDR(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWADDR),
    .m_axi_dma_control_AWID(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWID),
    .m_axi_dma_control_AWLEN(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWLEN),
    .m_axi_dma_control_AWSIZE(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWSIZE),
    .m_axi_dma_control_AWBURST(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWBURST),
    .m_axi_dma_control_AWLOCK(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWLOCK),
    .m_axi_dma_control_AWCACHE(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWCACHE),
    .m_axi_dma_control_AWPROT(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWPROT),
    .m_axi_dma_control_AWQOS(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWQOS),
    .m_axi_dma_control_AWREGION(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWREGION),
    .m_axi_dma_control_AWUSER(grp_write_s2mm_1_fu_475_m_axi_dma_control_AWUSER),
    .m_axi_dma_control_WVALID(grp_write_s2mm_1_fu_475_m_axi_dma_control_WVALID),
    .m_axi_dma_control_WREADY(m_axi_dma_control_WREADY),
    .m_axi_dma_control_WDATA(grp_write_s2mm_1_fu_475_m_axi_dma_control_WDATA),
    .m_axi_dma_control_WSTRB(grp_write_s2mm_1_fu_475_m_axi_dma_control_WSTRB),
    .m_axi_dma_control_WLAST(grp_write_s2mm_1_fu_475_m_axi_dma_control_WLAST),
    .m_axi_dma_control_WID(grp_write_s2mm_1_fu_475_m_axi_dma_control_WID),
    .m_axi_dma_control_WUSER(grp_write_s2mm_1_fu_475_m_axi_dma_control_WUSER),
    .m_axi_dma_control_ARVALID(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARVALID),
    .m_axi_dma_control_ARREADY(1'b0),
    .m_axi_dma_control_ARADDR(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARADDR),
    .m_axi_dma_control_ARID(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARID),
    .m_axi_dma_control_ARLEN(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARLEN),
    .m_axi_dma_control_ARSIZE(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARSIZE),
    .m_axi_dma_control_ARBURST(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARBURST),
    .m_axi_dma_control_ARLOCK(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARLOCK),
    .m_axi_dma_control_ARCACHE(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARCACHE),
    .m_axi_dma_control_ARPROT(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARPROT),
    .m_axi_dma_control_ARQOS(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARQOS),
    .m_axi_dma_control_ARREGION(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARREGION),
    .m_axi_dma_control_ARUSER(grp_write_s2mm_1_fu_475_m_axi_dma_control_ARUSER),
    .m_axi_dma_control_RVALID(1'b0),
    .m_axi_dma_control_RREADY(grp_write_s2mm_1_fu_475_m_axi_dma_control_RREADY),
    .m_axi_dma_control_RDATA(32'd0),
    .m_axi_dma_control_RLAST(1'b0),
    .m_axi_dma_control_RID(1'd0),
    .m_axi_dma_control_RUSER(1'd0),
    .m_axi_dma_control_RRESP(2'd0),
    .m_axi_dma_control_BVALID(m_axi_dma_control_BVALID),
    .m_axi_dma_control_BREADY(grp_write_s2mm_1_fu_475_m_axi_dma_control_BREADY),
    .m_axi_dma_control_BRESP(m_axi_dma_control_BRESP),
    .m_axi_dma_control_BID(m_axi_dma_control_BID),
    .m_axi_dma_control_BUSER(m_axi_dma_control_BUSER),
    .signal_r(grp_write_s2mm_1_fu_475_signal_r)
);

Conv_sysarr_mul_33s_31s_62_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 31 ),
    .dout_WIDTH( 62 ))
mul_33s_31s_62_7_1_U206(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_453_p0),
    .din1(grp_fu_453_p1),
    .ce(grp_fu_453_ce),
    .dout(grp_fu_453_p2)
);

Conv_sysarr_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U207(
    .din0(output_l2_0_load_reg_1046),
    .din1(output_l2_1_load_reg_1051),
    .din2(output_l2_2_load_reg_1056),
    .din3(output_l2_3_load_reg_1061),
    .din4(tmp_fu_747_p5),
    .dout(tmp_fu_747_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_write_s2mm_1_fu_475_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state42))) begin
            grp_write_s2mm_1_fu_475_ap_start_reg <= 1'b1;
        end else if ((grp_write_s2mm_1_fu_475_ap_ready == 1'b1)) begin
            grp_write_s2mm_1_fu_475_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_write_s2mm_1_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        h_reg_396 <= h_1_reg_1114;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        h_reg_396 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_write_s2mm_1_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        indvar_flatten_reg_374 <= add_ln341_reg_929;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        indvar_flatten_reg_374 <= 62'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln371_fu_689_p2 == 1'd0) & (cmp14102_reg_892 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        ki_1_reg_441 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state40) & (out_data_TREADY == 1'b1))) begin
        ki_1_reg_441 <= add_ln374_reg_1041;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        ki_reg_419 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (in_data_TVALID == 1'b1))) begin
        ki_reg_419 <= add_ln359_reg_990;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_write_s2mm_1_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
        ko_reg_385 <= select_ln341_1_reg_939;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ko_reg_385 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        w_1_reg_430 <= 32'd0;
    end else if (((icmp_ln374_fu_731_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
        w_1_reg_430 <= add_ln371_reg_1008;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14102_reg_892 == 1'd0) & (1'b1 == ap_CS_fsm_state19) & (m_axi_dma_control_BVALID == 1'b1))) begin
        w_reg_408 <= 32'd0;
    end else if (((icmp_ln359_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
        w_reg_408 <= add_ln356_reg_972;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        add51_reg_995 <= grp_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln341_reg_929 <= add_ln341_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln350_reg_896 <= add_ln350_fu_543_p2;
        cmp14102_reg_892 <= cmp14102_fu_534_p2;
        empty_90_reg_886[31 : 4] <= empty_90_fu_529_p2[31 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln356_reg_972 <= add_ln356_fu_636_p2;
        tmp_3_cast_reg_964[6 : 2] <= tmp_3_cast_fu_623_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln359_reg_990 <= add_ln359_fu_666_p2;
        stream_buffer_addr_reg_982 <= zext_ln368_1_fu_655_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((cmp14102_reg_892 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        add_ln371_reg_1008 <= add_ln371_fu_694_p2;
        tmp_4_cast_reg_1000[6 : 2] <= tmp_4_cast_fu_681_p3[6 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        add_ln374_reg_1041 <= add_ln374_fu_737_p2;
        stream_buffer_addr_1_reg_1033 <= zext_ln377_1_fu_726_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        empty_88_reg_867 <= empty_88_fu_497_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        empty_reg_852 <= empty_fu_488_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        h_1_reg_1114 <= h_1_fu_834_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln341_fu_573_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        icmp_ln343_reg_934 <= icmp_ln343_fu_591_p2;
        select_ln341_1_reg_939 <= select_ln341_1_fu_596_p3;
        trunc_ln341_reg_944 <= trunc_ln341_fu_604_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln356_fu_631_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        mul491_reg_977 <= mul491_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (m_axi_dma_control_BVALID == 1'b1))) begin
        mul_ln341_reg_949 <= grp_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln371_fu_689_p2 == 1'd0) & (cmp14102_reg_892 == 1'd0) & (1'b1 == ap_CS_fsm_state33))) begin
        output_l2_0_addr_reg_1013 <= idxprom57_fu_709_p1;
        output_l2_1_addr_reg_1018 <= idxprom57_fu_709_p1;
        output_l2_2_addr_reg_1023 <= idxprom57_fu_709_p1;
        output_l2_3_addr_reg_1028 <= idxprom57_fu_709_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        output_l2_0_load_reg_1046 <= output_l2_0_q0;
        output_l2_1_load_reg_1051 <= output_l2_1_q0;
        output_l2_2_load_reg_1056 <= output_l2_2_q0;
        output_l2_3_load_reg_1061 <= output_l2_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_484 <= grp_fu_453_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (m_axi_dma_control_BVALID == 1'b1))) begin
        select_ln341_reg_954 <= select_ln341_fu_608_p3;
        trunc_ln343_reg_959 <= trunc_ln343_fu_615_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        stream_buffer_load_reg_1066 <= stream_buffer_q0;
        tmp_last_V_reg_1094 <= tmp_last_V_fu_769_p2;
        tmp_reg_1074 <= tmp_fu_747_p6;
        trunc_ln377_2_reg_1079 <= trunc_ln377_2_fu_757_p1;
        trunc_ln377_3_reg_1084 <= trunc_ln377_3_fu_761_p1;
        trunc_ln377_4_reg_1089 <= trunc_ln377_4_fu_765_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) & (out_data_TREADY == 1'b1))) begin
        tmp_data_V_1_reg_1099 <= {{add_ln377_2_fu_794_p2[15:8]}};
        tmp_data_V_2_reg_1104 <= {{add_ln377_1_fu_789_p2[23:16]}};
        tmp_data_V_3_reg_1109 <= {{write_data_fu_784_p2[31:24]}};
    end
end

always @ (*) begin
    if ((((icmp_ln341_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10))) begin
        dma_control_blk_n_AW = m_axi_dma_control_AWREADY;
    end else begin
        dma_control_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16))) begin
        dma_control_blk_n_B = m_axi_dma_control_BVALID;
    end else begin
        dma_control_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        dma_control_blk_n_W = m_axi_dma_control_WREADY;
    end else begin
        dma_control_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | ((m_axi_dma_control_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_dma_control_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state16) & (m_axi_dma_control_BVALID == 1'b1)))) begin
        grp_fu_453_ce = 1'b1;
    end else begin
        grp_fu_453_ce = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_453_p0 = mul491_reg_977;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_453_p0 = trunc_ln341_reg_944;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_453_p0 = cast1_fu_516_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_453_p0 = wmo;
    end else begin
        grp_fu_453_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_453_p1 = empty_reg_852;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_453_p1 = empty_88_reg_867;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_453_p1 = cast_fu_511_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_453_p1 = empty_89_fu_492_p1;
    end else begin
        grp_fu_453_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        grp_write_s2mm_1_fu_475_signal_r = 13'd4097;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_write_s2mm_1_fu_475_signal_r = 13'd1;
    end else begin
        grp_write_s2mm_1_fu_475_signal_r = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22))) begin
        in_data_TDATA_blk_n = in_data_TVALID;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state25) & (in_data_TVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state24) & (in_data_TVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state23) & (in_data_TVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state22) & (in_data_TVALID == 1'b1)))) begin
        in_data_TREADY = 1'b1;
    end else begin
        in_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
        m_axi_dma_control_AWADDR = 64'd22;
    end else if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_dma_control_AWADDR = 64'd18;
    end else if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_dma_control_AWADDR = 64'd10;
    end else if (((m_axi_dma_control_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
        m_axi_dma_control_AWADDR = 64'd6;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWADDR = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWADDR;
    end else begin
        m_axi_dma_control_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWBURST = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWBURST;
    end else begin
        m_axi_dma_control_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWCACHE = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWCACHE;
    end else begin
        m_axi_dma_control_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWID = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWID;
    end else begin
        m_axi_dma_control_AWID = 1'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_dma_control_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_dma_control_AWLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWLEN = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWLEN;
    end else begin
        m_axi_dma_control_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWLOCK = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWLOCK;
    end else begin
        m_axi_dma_control_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWPROT = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWPROT;
    end else begin
        m_axi_dma_control_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWQOS = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWQOS;
    end else begin
        m_axi_dma_control_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWREGION = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWREGION;
    end else begin
        m_axi_dma_control_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWSIZE = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWSIZE;
    end else begin
        m_axi_dma_control_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWUSER = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWUSER;
    end else begin
        m_axi_dma_control_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)) | ((m_axi_dma_control_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10)))) begin
        m_axi_dma_control_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_AWVALID = grp_write_s2mm_1_fu_475_m_axi_dma_control_AWVALID;
    end else begin
        m_axi_dma_control_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state19) & (m_axi_dma_control_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state18) & (m_axi_dma_control_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state17) & (m_axi_dma_control_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state16) & (m_axi_dma_control_BVALID == 1'b1)))) begin
        m_axi_dma_control_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_BREADY = grp_write_s2mm_1_fu_475_m_axi_dma_control_BREADY;
    end else begin
        m_axi_dma_control_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state12))) begin
        m_axi_dma_control_WDATA = empty_90_reg_886;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_dma_control_WDATA = add_ln350_reg_896;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_WDATA = grp_write_s2mm_1_fu_475_m_axi_dma_control_WDATA;
    end else begin
        m_axi_dma_control_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_WID = grp_write_s2mm_1_fu_475_m_axi_dma_control_WID;
    end else begin
        m_axi_dma_control_WID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_WLAST = grp_write_s2mm_1_fu_475_m_axi_dma_control_WLAST;
    end else begin
        m_axi_dma_control_WLAST = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11))) begin
        m_axi_dma_control_WSTRB = 4'd15;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_WSTRB = grp_write_s2mm_1_fu_475_m_axi_dma_control_WSTRB;
    end else begin
        m_axi_dma_control_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_WUSER = grp_write_s2mm_1_fu_475_m_axi_dma_control_WUSER;
    end else begin
        m_axi_dma_control_WUSER = 1'd0;
    end
end

always @ (*) begin
    if ((((m_axi_dma_control_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14)) | ((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13)) | ((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12)) | ((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11)))) begin
        m_axi_dma_control_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state42))) begin
        m_axi_dma_control_WVALID = grp_write_s2mm_1_fu_475_m_axi_dma_control_WVALID;
    end else begin
        m_axi_dma_control_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        out_data_TDATA = tmp_data_V_3_reg_1109;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        out_data_TDATA = tmp_data_V_2_reg_1104;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        out_data_TDATA = tmp_data_V_1_reg_1099;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        out_data_TDATA = tmp_data_V_fu_799_p2;
    end else begin
        out_data_TDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        out_data_TDATA_blk_n = out_data_TREADY;
    end else begin
        out_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        out_data_TLAST = tmp_last_V_reg_1094;
    end else if (((1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        out_data_TLAST = 1'd0;
    end else begin
        out_data_TLAST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state40) & (out_data_TREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state39) & (out_data_TREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state38) & (out_data_TREADY == 1'b1)) | ((1'b1 == ap_CS_fsm_state37) & (out_data_TREADY == 1'b1)))) begin
        out_data_TVALID = 1'b1;
    end else begin
        out_data_TVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_l2_0_ce0 = 1'b1;
    end else begin
        output_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_l2_1_ce0 = 1'b1;
    end else begin
        output_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_l2_2_ce0 = 1'b1;
    end else begin
        output_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        output_l2_3_ce0 = 1'b1;
    end else begin
        output_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        stream_buffer_address0 = stream_buffer_addr_1_reg_1033;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        stream_buffer_address0 = stream_buffer_addr_reg_982;
    end else begin
        stream_buffer_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | ((1'b1 == ap_CS_fsm_state22) & (in_data_TVALID == 1'b1)))) begin
        stream_buffer_ce0 = 1'b1;
    end else begin
        stream_buffer_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) & (in_data_TVALID == 1'b1))) begin
        stream_buffer_we0 = 1'b1;
    end else begin
        stream_buffer_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln341_fu_573_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((m_axi_dma_control_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b0 == ap_block_state11_io) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b0 == ap_block_state12_io) & (1'b1 == ap_CS_fsm_state12))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (((1'b0 == ap_block_state13_io) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((m_axi_dma_control_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (((cmp14102_reg_892 == 1'd0) & (1'b1 == ap_CS_fsm_state19) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else if (((cmp14102_reg_892 == 1'd1) & (1'b1 == ap_CS_fsm_state19) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln356_fu_631_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state21 : begin
            if (((icmp_ln359_fu_660_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state21))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (in_data_TVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (in_data_TVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (in_data_TVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (in_data_TVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            if (((1'b1 == ap_CS_fsm_state33) & ((icmp_ln371_fu_689_p2 == 1'd1) | (cmp14102_reg_892 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_state34 : begin
            if (((icmp_ln374_fu_731_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state34))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state35;
            end
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (out_data_TREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        ap_ST_fsm_state38 : begin
            if (((1'b1 == ap_CS_fsm_state38) & (out_data_TREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state39 : begin
            if (((1'b1 == ap_CS_fsm_state39) & (out_data_TREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state39;
            end
        end
        ap_ST_fsm_state40 : begin
            if (((1'b1 == ap_CS_fsm_state40) & (out_data_TREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end
        end
        ap_ST_fsm_state41 : begin
            if (((out_responsed_read_read_fu_202_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state41))) begin
                ap_NS_fsm = ap_ST_fsm_state41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((grp_write_s2mm_1_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_write_s2mm_1_fu_475_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln341_fu_579_p2 = (indvar_flatten_reg_374 + 62'd1);

assign add_ln350_fu_543_p2 = ($signed(output_addr) + $signed(sext_ln350_fu_539_p1));

assign add_ln356_fu_636_p2 = (32'd1 + w_reg_408);

assign add_ln359_fu_666_p2 = (ki_reg_419 + 3'd1);

assign add_ln368_fu_650_p2 = (zext_ln368_fu_646_p1 + tmp_3_cast_reg_964);

assign add_ln371_fu_694_p2 = (32'd1 + w_1_reg_430);

assign add_ln374_fu_737_p2 = (ki_1_reg_441 + 3'd1);

assign add_ln377_1_fu_789_p2 = ($signed(trunc_ln377_4_reg_1089) + $signed(sext_ln377_2_fu_781_p1));

assign add_ln377_2_fu_794_p2 = ($signed(trunc_ln377_3_reg_1084) + $signed(sext_ln377_1_fu_778_p1));

assign add_ln377_fu_721_p2 = (zext_ln377_fu_717_p1 + tmp_4_cast_reg_1000);

assign addr_fu_521_p1 = reg_484;

assign addr_fu_521_p3 = {{addr_fu_521_p1}, {4'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11_io = ((m_axi_dma_control_WREADY == 1'b0) | (m_axi_dma_control_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state12_io = ((m_axi_dma_control_WREADY == 1'b0) | (m_axi_dma_control_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state13_io = ((m_axi_dma_control_WREADY == 1'b0) | (m_axi_dma_control_AWREADY == 1'b0));
end

assign cast1_fu_516_p1 = H_L2;

assign cast_fu_511_p1 = div_cast_fu_501_p4;

assign cmp14102_fu_534_p2 = ((W_L2 == 32'd0) ? 1'b1 : 1'b0);

assign div_cast_fu_501_p4 = {{K_L2[31:2]}};

assign empty_88_fu_497_p1 = H_L2[10:0];

assign empty_89_fu_492_p1 = W_L2[11:0];

assign empty_90_fu_529_p2 = W_L2 << 32'd4;

assign empty_95_fu_700_p1 = w_1_reg_430[10:0];

assign empty_fu_488_p1 = W_L2[10:0];

assign grp_write_s2mm_1_fu_475_ap_start = grp_write_s2mm_1_fu_475_ap_start_reg;

assign h_1_fu_834_p2 = (select_ln341_reg_954 + 32'd1);

assign icmp_ln341_fu_573_p2 = ((indvar_flatten_reg_374 == reg_484) ? 1'b1 : 1'b0);

assign icmp_ln343_fu_591_p2 = ((h_reg_396 == H_L2) ? 1'b1 : 1'b0);

assign icmp_ln356_fu_631_p2 = ((w_reg_408 == W_L2) ? 1'b1 : 1'b0);

assign icmp_ln359_fu_660_p2 = ((ki_reg_419 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln371_fu_689_p2 = ((w_1_reg_430 == W_L2) ? 1'b1 : 1'b0);

assign icmp_ln374_fu_731_p2 = ((ki_1_reg_441 == 3'd4) ? 1'b1 : 1'b0);

assign idxprom57_fu_709_p1 = khw_fu_704_p2;

assign khw_fu_704_p2 = (empty_95_fu_700_p1 + add51_reg_995);

assign ko_2_fu_585_p2 = (30'd1 + ko_reg_385);

assign m_axi_dma_control_ARADDR = 32'd0;

assign m_axi_dma_control_ARBURST = 2'd0;

assign m_axi_dma_control_ARCACHE = 4'd0;

assign m_axi_dma_control_ARID = 1'd0;

assign m_axi_dma_control_ARLEN = 32'd0;

assign m_axi_dma_control_ARLOCK = 2'd0;

assign m_axi_dma_control_ARPROT = 3'd0;

assign m_axi_dma_control_ARQOS = 4'd0;

assign m_axi_dma_control_ARREGION = 4'd0;

assign m_axi_dma_control_ARSIZE = 3'd0;

assign m_axi_dma_control_ARUSER = 1'd0;

assign m_axi_dma_control_ARVALID = 1'b0;

assign m_axi_dma_control_RREADY = 1'b0;

assign mul491_fu_642_p2 = (trunc_ln343_reg_959 + mul_ln341_reg_949);

assign out_data_TKEEP = 1'd0;

assign out_data_TSTRB = 1'd0;

assign out_responsed_read_read_fu_202_p2 = out_responsed;

assign output_l2_0_address0 = output_l2_0_addr_reg_1013;

assign output_l2_1_address0 = output_l2_1_addr_reg_1018;

assign output_l2_2_address0 = output_l2_2_addr_reg_1023;

assign output_l2_3_address0 = output_l2_3_addr_reg_1028;

assign select_ln341_1_fu_596_p3 = ((icmp_ln343_fu_591_p2[0:0] === 1'b1) ? ko_2_fu_585_p2 : ko_reg_385);

assign select_ln341_fu_608_p3 = ((icmp_ln343_reg_934[0:0] === 1'b1) ? 32'd0 : h_reg_396);

assign sext_ln350_fu_539_p1 = $signed(addr_fu_521_p3);

assign sext_ln377_1_fu_778_p1 = stream_buffer_load_reg_1066;

assign sext_ln377_2_fu_781_p1 = stream_buffer_load_reg_1066;

assign sext_ln377_fu_775_p1 = stream_buffer_load_reg_1066;

assign tmp_3_cast_fu_623_p3 = {{trunc_ln368_fu_619_p1}, {2'd0}};

assign tmp_4_cast_fu_681_p3 = {{trunc_ln377_fu_677_p1}, {2'd0}};

assign tmp_data_V_fu_799_p2 = ($signed(trunc_ln377_2_reg_1079) + $signed(stream_buffer_load_reg_1066));

assign tmp_fu_747_p5 = ki_1_reg_441[1:0];

assign tmp_last_V_fu_769_p2 = ((ki_1_reg_441 == 3'd3) ? 1'b1 : 1'b0);

assign trunc_ln341_fu_604_p1 = select_ln341_1_fu_596_p3[10:0];

assign trunc_ln343_fu_615_p1 = select_ln341_fu_608_p3[10:0];

assign trunc_ln368_fu_619_p1 = w_reg_408[4:0];

assign trunc_ln377_2_fu_757_p1 = tmp_fu_747_p6[7:0];

assign trunc_ln377_3_fu_761_p1 = tmp_fu_747_p6[15:0];

assign trunc_ln377_4_fu_765_p1 = tmp_fu_747_p6[23:0];

assign trunc_ln377_fu_677_p1 = w_1_reg_430[4:0];

assign write_data_fu_784_p2 = ($signed(sext_ln377_fu_775_p1) + $signed(tmp_reg_1074));

assign zext_ln368_1_fu_655_p1 = add_ln368_fu_650_p2;

assign zext_ln368_fu_646_p1 = ki_reg_419;

assign zext_ln377_1_fu_726_p1 = add_ln377_fu_721_p2;

assign zext_ln377_fu_717_p1 = ki_1_reg_441;

always @ (posedge ap_clk) begin
    empty_90_reg_886[3:0] <= 4'b0000;
    tmp_3_cast_reg_964[1:0] <= 2'b00;
    tmp_4_cast_reg_1000[1:0] <= 2'b00;
end

endmodule //Conv_sysarr_output_dram_write_1
