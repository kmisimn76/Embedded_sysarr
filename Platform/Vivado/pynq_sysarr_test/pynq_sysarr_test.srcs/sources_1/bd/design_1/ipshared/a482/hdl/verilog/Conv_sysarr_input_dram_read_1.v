// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_input_dram_read_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dma_control_AWVALID,
        m_axi_dma_control_AWREADY,
        m_axi_dma_control_AWADDR,
        m_axi_dma_control_AWID,
        m_axi_dma_control_AWLEN,
        m_axi_dma_control_AWSIZE,
        m_axi_dma_control_AWBURST,
        m_axi_dma_control_AWLOCK,
        m_axi_dma_control_AWCACHE,
        m_axi_dma_control_AWPROT,
        m_axi_dma_control_AWQOS,
        m_axi_dma_control_AWREGION,
        m_axi_dma_control_AWUSER,
        m_axi_dma_control_WVALID,
        m_axi_dma_control_WREADY,
        m_axi_dma_control_WDATA,
        m_axi_dma_control_WSTRB,
        m_axi_dma_control_WLAST,
        m_axi_dma_control_WID,
        m_axi_dma_control_WUSER,
        m_axi_dma_control_ARVALID,
        m_axi_dma_control_ARREADY,
        m_axi_dma_control_ARADDR,
        m_axi_dma_control_ARID,
        m_axi_dma_control_ARLEN,
        m_axi_dma_control_ARSIZE,
        m_axi_dma_control_ARBURST,
        m_axi_dma_control_ARLOCK,
        m_axi_dma_control_ARCACHE,
        m_axi_dma_control_ARPROT,
        m_axi_dma_control_ARQOS,
        m_axi_dma_control_ARREGION,
        m_axi_dma_control_ARUSER,
        m_axi_dma_control_RVALID,
        m_axi_dma_control_RREADY,
        m_axi_dma_control_RDATA,
        m_axi_dma_control_RLAST,
        m_axi_dma_control_RID,
        m_axi_dma_control_RUSER,
        m_axi_dma_control_RRESP,
        m_axi_dma_control_BVALID,
        m_axi_dma_control_BREADY,
        m_axi_dma_control_BRESP,
        m_axi_dma_control_BID,
        m_axi_dma_control_BUSER,
        data_addr,
        in_data_TDATA,
        in_data_TVALID,
        in_data_TREADY,
        in_data_TKEEP,
        in_data_TSTRB,
        in_data_TLAST,
        cmo,
        hmo,
        wmo,
        C_L2,
        H_L2,
        W_L2,
        H_in_L2,
        W_in_L2,
        WH_in,
        data_l2_0_address0,
        data_l2_0_ce0,
        data_l2_0_we0,
        data_l2_0_d0,
        data_l2_1_address0,
        data_l2_1_ce0,
        data_l2_1_we0,
        data_l2_1_d0,
        data_l2_2_address0,
        data_l2_2_ce0,
        data_l2_2_we0,
        data_l2_2_d0,
        data_l2_3_address0,
        data_l2_3_ce0,
        data_l2_3_we0,
        data_l2_3_d0
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dma_control_AWVALID;
input   m_axi_dma_control_AWREADY;
output  [31:0] m_axi_dma_control_AWADDR;
output  [0:0] m_axi_dma_control_AWID;
output  [31:0] m_axi_dma_control_AWLEN;
output  [2:0] m_axi_dma_control_AWSIZE;
output  [1:0] m_axi_dma_control_AWBURST;
output  [1:0] m_axi_dma_control_AWLOCK;
output  [3:0] m_axi_dma_control_AWCACHE;
output  [2:0] m_axi_dma_control_AWPROT;
output  [3:0] m_axi_dma_control_AWQOS;
output  [3:0] m_axi_dma_control_AWREGION;
output  [0:0] m_axi_dma_control_AWUSER;
output   m_axi_dma_control_WVALID;
input   m_axi_dma_control_WREADY;
output  [31:0] m_axi_dma_control_WDATA;
output  [3:0] m_axi_dma_control_WSTRB;
output   m_axi_dma_control_WLAST;
output  [0:0] m_axi_dma_control_WID;
output  [0:0] m_axi_dma_control_WUSER;
output   m_axi_dma_control_ARVALID;
input   m_axi_dma_control_ARREADY;
output  [31:0] m_axi_dma_control_ARADDR;
output  [0:0] m_axi_dma_control_ARID;
output  [31:0] m_axi_dma_control_ARLEN;
output  [2:0] m_axi_dma_control_ARSIZE;
output  [1:0] m_axi_dma_control_ARBURST;
output  [1:0] m_axi_dma_control_ARLOCK;
output  [3:0] m_axi_dma_control_ARCACHE;
output  [2:0] m_axi_dma_control_ARPROT;
output  [3:0] m_axi_dma_control_ARQOS;
output  [3:0] m_axi_dma_control_ARREGION;
output  [0:0] m_axi_dma_control_ARUSER;
input   m_axi_dma_control_RVALID;
output   m_axi_dma_control_RREADY;
input  [31:0] m_axi_dma_control_RDATA;
input   m_axi_dma_control_RLAST;
input  [0:0] m_axi_dma_control_RID;
input  [0:0] m_axi_dma_control_RUSER;
input  [1:0] m_axi_dma_control_RRESP;
input   m_axi_dma_control_BVALID;
output   m_axi_dma_control_BREADY;
input  [1:0] m_axi_dma_control_BRESP;
input  [0:0] m_axi_dma_control_BID;
input  [0:0] m_axi_dma_control_BUSER;
input  [31:0] data_addr;
input  [7:0] in_data_TDATA;
input   in_data_TVALID;
output   in_data_TREADY;
input  [0:0] in_data_TKEEP;
input  [0:0] in_data_TSTRB;
input  [0:0] in_data_TLAST;
input  [13:0] cmo;
input  [13:0] hmo;
input  [13:0] wmo;
input  [31:0] C_L2;
input  [13:0] H_L2;
input  [13:0] W_L2;
input  [31:0] H_in_L2;
input  [31:0] W_in_L2;
input  [13:0] WH_in;
output  [10:0] data_l2_0_address0;
output   data_l2_0_ce0;
output   data_l2_0_we0;
output  [7:0] data_l2_0_d0;
output  [10:0] data_l2_1_address0;
output   data_l2_1_ce0;
output   data_l2_1_we0;
output  [7:0] data_l2_1_d0;
output  [10:0] data_l2_2_address0;
output   data_l2_2_ce0;
output   data_l2_2_we0;
output  [7:0] data_l2_2_d0;
output  [10:0] data_l2_3_address0;
output   data_l2_3_ce0;
output   data_l2_3_we0;
output  [7:0] data_l2_3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_dma_control_AWVALID;
reg[31:0] m_axi_dma_control_AWADDR;
reg m_axi_dma_control_WVALID;
reg[31:0] m_axi_dma_control_WDATA;
reg m_axi_dma_control_BREADY;
reg in_data_TREADY;
reg data_l2_0_ce0;
reg data_l2_0_we0;
reg data_l2_1_ce0;
reg data_l2_1_we0;
reg data_l2_2_ce0;
reg data_l2_2_we0;
reg data_l2_3_ce0;
reg data_l2_3_we0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    dma_control_blk_n_AW;
wire    ap_CS_fsm_state30;
reg    dma_control_blk_n_W;
wire    ap_CS_fsm_state31;
reg    dma_control_blk_n_B;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state37;
reg    in_data_TDATA_blk_n;
wire    ap_CS_fsm_state29;
wire   [0:0] icmp_ln305_fu_514_p2;
wire   [61:0] grp_fu_328_p2;
reg   [13:0] reg_375;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
reg   [29:0] div_cast1_reg_585;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [10:0] empty_96_fu_400_p1;
reg  signed [10:0] empty_96_reg_620;
wire   [61:0] cast_fu_404_p1;
wire   [61:0] cast1_fu_408_p1;
reg   [13:0] mul_reg_635;
wire    ap_CS_fsm_state7;
reg   [13:0] mul6_reg_640;
wire    ap_CS_fsm_state8;
reg   [13:0] mul10_reg_645;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire  signed [10:0] empty_fu_413_p1;
reg  signed [10:0] empty_reg_665;
reg   [61:0] bound_reg_682;
wire   [61:0] add_ln300_fu_434_p2;
reg   [61:0] add_ln300_reg_690;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln302_fu_446_p2;
reg   [0:0] icmp_ln302_reg_695;
wire   [0:0] icmp_ln300_fu_429_p2;
wire   [29:0] mul4_mid2_v_v_v_fu_451_p3;
reg   [29:0] mul4_mid2_v_v_v_reg_702;
wire   [13:0] empty_101_fu_459_p1;
reg   [13:0] empty_101_reg_707;
wire  signed [10:0] empty_102_fu_463_p1;
reg  signed [10:0] empty_102_reg_712;
wire  signed [13:0] mul4_mid2_v_fu_467_p2;
reg  signed [13:0] mul4_mid2_v_reg_717;
wire    ap_CS_fsm_state12;
wire   [13:0] trunc_ln302_1_mid2_fu_475_p3;
reg   [13:0] trunc_ln302_1_mid2_reg_722;
wire  signed [13:0] mul51_fu_486_p2;
reg  signed [13:0] mul51_reg_727;
wire  signed [10:0] mul192_fu_503_p2;
reg  signed [10:0] mul192_reg_732;
wire    ap_CS_fsm_state21;
wire   [13:0] add_ln311_fu_509_p2;
reg   [13:0] add_ln311_reg_737;
wire   [31:0] add_ln305_fu_519_p2;
reg   [31:0] add_ln305_reg_745;
reg    ap_block_state29;
wire   [13:0] add_ln311_1_fu_533_p2;
reg   [13:0] add_ln311_1_reg_750;
wire   [10:0] chw_fu_538_p2;
reg   [10:0] chw_reg_755;
reg   [7:0] temp_data_V_reg_760;
wire   [31:0] h_2_fu_550_p3;
wire   [31:0] add_ln312_fu_568_p2;
reg   [31:0] add_ln312_reg_770;
reg   [7:0] temp_data_V_1_reg_775;
reg   [7:0] temp_data_V_2_reg_780;
reg    ap_block_state31_io;
reg   [61:0] indvar_flatten_reg_283;
reg   [29:0] co_reg_294;
reg   [31:0] h_reg_305;
reg   [31:0] w_reg_317;
wire   [63:0] idxprom_fu_573_p1;
reg  signed [30:0] grp_fu_328_p0;
reg  signed [32:0] grp_fu_328_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire   [29:0] co_2_fu_440_p2;
wire   [13:0] trunc_ln302_1_fu_471_p1;
wire   [13:0] tmp_fu_482_p2;
wire   [10:0] trunc_ln302_fu_492_p1;
wire   [10:0] trunc_ln302_mid2_fu_496_p3;
wire   [10:0] mul192_fu_503_p1;
wire   [13:0] trunc_ln311_1_fu_529_p1;
wire   [10:0] chw_fu_538_p0;
wire   [10:0] trunc_ln311_fu_525_p1;
wire   [31:0] add_ln302_fu_544_p2;
wire   [15:0] addr_fu_557_p3;
wire  signed [31:0] sext_ln312_fu_564_p1;
reg   [36:0] ap_NS_fsm;
wire  signed [13:0] grp_fu_328_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
end

Conv_sysarr_mul_31s_33s_62_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 31 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 62 ))
mul_31s_33s_62_7_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_328_p0),
    .din1(grp_fu_328_p1),
    .ce(1'b1),
    .dout(grp_fu_328_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd1))) begin
        co_reg_294 <= mul4_mid2_v_v_v_reg_702;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        co_reg_294 <= 30'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd1))) begin
        h_reg_305 <= h_2_fu_550_p3;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        h_reg_305 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd1))) begin
        indvar_flatten_reg_283 <= add_ln300_reg_690;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_reg_283 <= 62'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        w_reg_317 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state37) & (m_axi_dma_control_BVALID == 1'b1))) begin
        w_reg_317 <= add_ln305_reg_745;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln300_reg_690 <= add_ln300_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29))) begin
        add_ln305_reg_745 <= add_ln305_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd0))) begin
        add_ln311_1_reg_750 <= add_ln311_1_fu_533_p2;
        chw_reg_755 <= chw_fu_538_p2;
        temp_data_V_reg_760 <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        add_ln311_reg_737 <= add_ln311_fu_509_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((m_axi_dma_control_AWREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        add_ln312_reg_770 <= add_ln312_fu_568_p2;
        temp_data_V_1_reg_775 <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        bound_reg_682 <= grp_fu_328_p2;
        empty_reg_665 <= empty_fu_413_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        div_cast1_reg_585 <= {{C_L2[31:2]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln300_fu_429_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        empty_101_reg_707 <= empty_101_fu_459_p1;
        empty_102_reg_712 <= empty_102_fu_463_p1;
        icmp_ln302_reg_695 <= icmp_ln302_fu_446_p2;
        mul4_mid2_v_v_v_reg_702 <= mul4_mid2_v_v_v_fu_451_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        empty_96_reg_620 <= empty_96_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul10_reg_645 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        mul192_reg_732 <= mul192_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        mul4_mid2_v_reg_717 <= mul4_mid2_v_fu_467_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mul51_reg_727 <= mul51_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul6_reg_640 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul_reg_635 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_375 <= grp_fu_328_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state31_io) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
        temp_data_V_2_reg_780 <= in_data_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        trunc_ln302_1_mid2_reg_722 <= trunc_ln302_1_mid2_fu_475_p3;
    end
end

always @ (*) begin
    if ((((icmp_ln300_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln300_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_0_ce0 = 1'b1;
    end else begin
        data_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_0_we0 = 1'b1;
    end else begin
        data_l2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_1_ce0 = 1'b1;
    end else begin
        data_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_1_we0 = 1'b1;
    end else begin
        data_l2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_2_ce0 = 1'b1;
    end else begin
        data_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_2_we0 = 1'b1;
    end else begin
        data_l2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_3_ce0 = 1'b1;
    end else begin
        data_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
        data_l2_3_we0 = 1'b1;
    end else begin
        data_l2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30))) begin
        dma_control_blk_n_AW = m_axi_dma_control_AWREADY;
    end else begin
        dma_control_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36))) begin
        dma_control_blk_n_B = m_axi_dma_control_BVALID;
    end else begin
        dma_control_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31))) begin
        dma_control_blk_n_W = m_axi_dma_control_WREADY;
    end else begin
        dma_control_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_328_p0 = mul192_reg_732;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_328_p0 = empty_102_reg_712;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_328_p0 = WH_in;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_328_p0 = cast_fu_404_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_328_p0 = wmo;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_328_p0 = hmo;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_328_p0 = cmo;
    end else begin
        grp_fu_328_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_328_p1 = empty_reg_665;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_328_p1 = mul51_reg_727;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_328_p1 = empty_96_reg_620;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_328_p1 = mul4_mid2_v_reg_717;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_328_p1 = cast1_fu_408_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_328_p1 = W_L2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_328_p1 = H_L2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_328_p1 = grp_fu_328_p10;
    end else begin
        grp_fu_328_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | ((1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd0)))) begin
        in_data_TDATA_blk_n = in_data_TVALID;
    end else begin
        in_data_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((1'b1 == ap_block_state31_io) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((m_axi_dma_control_AWREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state30)) | (~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd0)))) begin
        in_data_TREADY = 1'b1;
    end else begin
        in_data_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((1'b1 == ap_block_state31_io) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
        m_axi_dma_control_AWADDR = 64'd10;
    end else if ((~((m_axi_dma_control_AWREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
        m_axi_dma_control_AWADDR = 64'd6;
    end else begin
        m_axi_dma_control_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((~((1'b1 == ap_block_state31_io) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31)) | (~((m_axi_dma_control_AWREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state30)))) begin
        m_axi_dma_control_AWVALID = 1'b1;
    end else begin
        m_axi_dma_control_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state37) & (m_axi_dma_control_BVALID == 1'b1)) | ((1'b1 == ap_CS_fsm_state36) & (m_axi_dma_control_BVALID == 1'b1)))) begin
        m_axi_dma_control_BREADY = 1'b1;
    end else begin
        m_axi_dma_control_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((in_data_TVALID == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state32)) begin
            m_axi_dma_control_WDATA = 32'd4;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            m_axi_dma_control_WDATA = add_ln312_reg_770;
        end else begin
            m_axi_dma_control_WDATA = 'bx;
        end
    end else begin
        m_axi_dma_control_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32)) | (~((1'b1 == ap_block_state31_io) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31)))) begin
        m_axi_dma_control_WVALID = 1'b1;
    end else begin
        m_axi_dma_control_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln300_fu_429_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else if ((~((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln305_fu_514_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if ((~((m_axi_dma_control_AWREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state30))) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if ((~((1'b1 == ap_block_state31_io) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state31))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if ((~((m_axi_dma_control_WREADY == 1'b0) | (in_data_TVALID == 1'b0)) & (1'b1 == ap_CS_fsm_state32))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            if (((1'b1 == ap_CS_fsm_state36) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state36;
            end
        end
        ap_ST_fsm_state37 : begin
            if (((1'b1 == ap_CS_fsm_state37) & (m_axi_dma_control_BVALID == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln300_fu_434_p2 = (indvar_flatten_reg_283 + 62'd1);

assign add_ln302_fu_544_p2 = (h_reg_305 + 32'd1);

assign add_ln305_fu_519_p2 = (w_reg_317 + 32'd1);

assign add_ln311_1_fu_533_p2 = (trunc_ln311_1_fu_529_p1 + add_ln311_reg_737);

assign add_ln311_fu_509_p2 = (reg_375 + mul10_reg_645);

assign add_ln312_fu_568_p2 = ($signed(data_addr) + $signed(sext_ln312_fu_564_p1));

assign addr_fu_557_p3 = {{add_ln311_1_reg_750}, {2'd0}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state29 = ((icmp_ln305_fu_514_p2 == 1'd0) & (in_data_TVALID == 1'b0));
end

always @ (*) begin
    ap_block_state31_io = ((m_axi_dma_control_WREADY == 1'b0) | (m_axi_dma_control_AWREADY == 1'b0));
end

assign cast1_fu_408_p1 = H_in_L2;

assign cast_fu_404_p1 = div_cast1_reg_585;

assign chw_fu_538_p0 = reg_375;

assign chw_fu_538_p2 = (chw_fu_538_p0 + trunc_ln311_fu_525_p1);

assign co_2_fu_440_p2 = (30'd1 + co_reg_294);

assign data_l2_0_address0 = idxprom_fu_573_p1;

assign data_l2_0_d0 = temp_data_V_reg_760;

assign data_l2_1_address0 = idxprom_fu_573_p1;

assign data_l2_1_d0 = temp_data_V_1_reg_775;

assign data_l2_2_address0 = idxprom_fu_573_p1;

assign data_l2_2_d0 = temp_data_V_2_reg_780;

assign data_l2_3_address0 = idxprom_fu_573_p1;

assign data_l2_3_d0 = in_data_TDATA;

assign empty_101_fu_459_p1 = mul4_mid2_v_v_v_fu_451_p3[13:0];

assign empty_102_fu_463_p1 = mul4_mid2_v_v_v_fu_451_p3[10:0];

assign empty_96_fu_400_p1 = H_in_L2[10:0];

assign empty_fu_413_p1 = W_in_L2[10:0];

assign grp_fu_328_p10 = {{C_L2[15:2]}};

assign h_2_fu_550_p3 = ((icmp_ln302_reg_695[0:0] === 1'b1) ? 32'd1 : add_ln302_fu_544_p2);

assign icmp_ln300_fu_429_p2 = ((indvar_flatten_reg_283 == bound_reg_682) ? 1'b1 : 1'b0);

assign icmp_ln302_fu_446_p2 = ((h_reg_305 == H_in_L2) ? 1'b1 : 1'b0);

assign icmp_ln305_fu_514_p2 = ((w_reg_317 == W_in_L2) ? 1'b1 : 1'b0);

assign idxprom_fu_573_p1 = chw_reg_755;

assign m_axi_dma_control_ARADDR = 32'd0;

assign m_axi_dma_control_ARBURST = 2'd0;

assign m_axi_dma_control_ARCACHE = 4'd0;

assign m_axi_dma_control_ARID = 1'd0;

assign m_axi_dma_control_ARLEN = 32'd0;

assign m_axi_dma_control_ARLOCK = 2'd0;

assign m_axi_dma_control_ARPROT = 3'd0;

assign m_axi_dma_control_ARQOS = 4'd0;

assign m_axi_dma_control_ARREGION = 4'd0;

assign m_axi_dma_control_ARSIZE = 3'd0;

assign m_axi_dma_control_ARUSER = 1'd0;

assign m_axi_dma_control_ARVALID = 1'b0;

assign m_axi_dma_control_AWBURST = 2'd0;

assign m_axi_dma_control_AWCACHE = 4'd0;

assign m_axi_dma_control_AWID = 1'd0;

assign m_axi_dma_control_AWLEN = 32'd1;

assign m_axi_dma_control_AWLOCK = 2'd0;

assign m_axi_dma_control_AWPROT = 3'd0;

assign m_axi_dma_control_AWQOS = 4'd0;

assign m_axi_dma_control_AWREGION = 4'd0;

assign m_axi_dma_control_AWSIZE = 3'd0;

assign m_axi_dma_control_AWUSER = 1'd0;

assign m_axi_dma_control_RREADY = 1'b0;

assign m_axi_dma_control_WID = 1'd0;

assign m_axi_dma_control_WLAST = 1'b0;

assign m_axi_dma_control_WSTRB = 4'd15;

assign m_axi_dma_control_WUSER = 1'd0;

assign mul192_fu_503_p1 = reg_375;

assign mul192_fu_503_p2 = (trunc_ln302_mid2_fu_496_p3 + mul192_fu_503_p1);

assign mul4_mid2_v_fu_467_p2 = (empty_101_reg_707 + mul_reg_635);

assign mul4_mid2_v_v_v_fu_451_p3 = ((icmp_ln302_fu_446_p2[0:0] === 1'b1) ? co_2_fu_440_p2 : co_reg_294);

assign mul51_fu_486_p2 = (tmp_fu_482_p2 + reg_375);

assign sext_ln312_fu_564_p1 = $signed(addr_fu_557_p3);

assign tmp_fu_482_p2 = (mul6_reg_640 + trunc_ln302_1_mid2_reg_722);

assign trunc_ln302_1_fu_471_p1 = h_reg_305[13:0];

assign trunc_ln302_1_mid2_fu_475_p3 = ((icmp_ln302_reg_695[0:0] === 1'b1) ? 14'd0 : trunc_ln302_1_fu_471_p1);

assign trunc_ln302_fu_492_p1 = h_reg_305[10:0];

assign trunc_ln302_mid2_fu_496_p3 = ((icmp_ln302_reg_695[0:0] === 1'b1) ? 11'd0 : trunc_ln302_fu_492_p1);

assign trunc_ln311_1_fu_529_p1 = w_reg_317[13:0];

assign trunc_ln311_fu_525_p1 = w_reg_317[10:0];

endmodule //Conv_sysarr_input_dram_read_1
