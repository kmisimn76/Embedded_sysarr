// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2020.1
// Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Conv_sysarr_runOutputL1toL2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_l1_address0,
        output_l1_ce0,
        output_l1_q0,
        output_l11_address0,
        output_l11_ce0,
        output_l11_q0,
        output_l12_address0,
        output_l12_ce0,
        output_l12_q0,
        output_l13_address0,
        output_l13_ce0,
        output_l13_q0,
        TILESIZE_H,
        TILESIZE_W,
        ko,
        ho,
        wo,
        W,
        H,
        isFirst,
        output_l2_0_address0,
        output_l2_0_ce0,
        output_l2_0_we0,
        output_l2_0_d0,
        output_l2_0_address1,
        output_l2_0_ce1,
        output_l2_0_we1,
        output_l2_0_d1,
        output_l2_1_address0,
        output_l2_1_ce0,
        output_l2_1_we0,
        output_l2_1_d0,
        output_l2_1_address1,
        output_l2_1_ce1,
        output_l2_1_we1,
        output_l2_1_d1,
        output_l2_2_address0,
        output_l2_2_ce0,
        output_l2_2_we0,
        output_l2_2_d0,
        output_l2_2_address1,
        output_l2_2_ce1,
        output_l2_2_we1,
        output_l2_2_d1,
        output_l2_3_address0,
        output_l2_3_ce0,
        output_l2_3_we0,
        output_l2_3_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_pp0_stage0 = 13'd1024;
parameter    ap_ST_fsm_pp0_stage1 = 13'd2048;
parameter    ap_ST_fsm_state26 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] output_l1_address0;
output   output_l1_ce0;
input  [17:0] output_l1_q0;
output  [7:0] output_l11_address0;
output   output_l11_ce0;
input  [17:0] output_l11_q0;
output  [7:0] output_l12_address0;
output   output_l12_ce0;
input  [17:0] output_l12_q0;
output  [7:0] output_l13_address0;
output   output_l13_ce0;
input  [17:0] output_l13_q0;
input  [31:0] TILESIZE_H;
input  [31:0] TILESIZE_W;
input  [10:0] ko;
input  [10:0] ho;
input  [10:0] wo;
input  [10:0] W;
input  [10:0] H;
input  [0:0] isFirst;
output  [10:0] output_l2_0_address0;
output   output_l2_0_ce0;
output   output_l2_0_we0;
output  [31:0] output_l2_0_d0;
output  [10:0] output_l2_0_address1;
output   output_l2_0_ce1;
output   output_l2_0_we1;
output  [31:0] output_l2_0_d1;
output  [10:0] output_l2_1_address0;
output   output_l2_1_ce0;
output   output_l2_1_we0;
output  [31:0] output_l2_1_d0;
output  [10:0] output_l2_1_address1;
output   output_l2_1_ce1;
output   output_l2_1_we1;
output  [31:0] output_l2_1_d1;
output  [10:0] output_l2_2_address0;
output   output_l2_2_ce0;
output   output_l2_2_we0;
output  [31:0] output_l2_2_d0;
output  [10:0] output_l2_2_address1;
output   output_l2_2_ce1;
output   output_l2_2_we1;
output  [31:0] output_l2_2_d1;
output  [10:0] output_l2_3_address0;
output   output_l2_3_ce0;
output   output_l2_3_we0;
output  [31:0] output_l2_3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg output_l1_ce0;
reg[7:0] output_l11_address0;
reg output_l11_ce0;
reg[7:0] output_l12_address0;
reg output_l12_ce0;
reg[7:0] output_l13_address0;
reg output_l13_ce0;
reg output_l2_0_ce0;
reg output_l2_0_we0;
reg output_l2_0_ce1;
reg output_l2_0_we1;
reg output_l2_1_ce0;
reg output_l2_1_we0;
reg output_l2_1_ce1;
reg output_l2_1_we1;
reg output_l2_2_ce0;
reg output_l2_2_we0;
reg output_l2_2_ce1;
reg output_l2_2_we1;
reg output_l2_3_ce0;
reg output_l2_3_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] output_l2_reduction_0_address0;
reg    output_l2_reduction_0_ce0;
reg    output_l2_reduction_0_we0;
wire   [31:0] output_l2_reduction_0_q0;
wire   [10:0] output_l2_reduction_0_address1;
reg    output_l2_reduction_0_ce1;
reg    output_l2_reduction_0_we1;
reg   [10:0] output_l2_reduction_1_address0;
reg    output_l2_reduction_1_ce0;
reg    output_l2_reduction_1_we0;
wire   [31:0] output_l2_reduction_1_q0;
wire   [10:0] output_l2_reduction_1_address1;
reg    output_l2_reduction_1_ce1;
reg    output_l2_reduction_1_we1;
reg   [10:0] output_l2_reduction_2_address0;
reg    output_l2_reduction_2_ce0;
reg    output_l2_reduction_2_we0;
wire   [31:0] output_l2_reduction_2_q0;
wire   [10:0] output_l2_reduction_2_address1;
reg    output_l2_reduction_2_ce1;
reg    output_l2_reduction_2_we1;
reg   [10:0] output_l2_reduction_3_address0;
reg    output_l2_reduction_3_ce0;
reg    output_l2_reduction_3_we0;
wire   [31:0] output_l2_reduction_3_q0;
wire   [10:0] output_l2_reduction_3_address1;
reg    output_l2_reduction_3_ce1;
reg    output_l2_reduction_3_we1;
wire   [31:0] output_l2_reduction_3_d1;
reg   [63:0] indvar_flatten_reg_380;
reg   [31:0] hi_reg_391;
reg   [31:0] wi_reg_402;
wire   [63:0] grp_fu_424_p2;
reg   [10:0] reg_458;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_state12_pp0_stage1_iter0;
wire    ap_block_state14_pp0_stage1_iter1;
wire    ap_block_state16_pp0_stage1_iter2;
wire    ap_block_state18_pp0_stage1_iter3;
wire    ap_block_state20_pp0_stage1_iter4;
wire    ap_block_state22_pp0_stage1_iter5;
wire    ap_block_state24_pp0_stage1_iter6;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln80_reg_734;
reg   [0:0] icmp_ln80_reg_734_pp0_iter3_reg;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_state11_pp0_stage0_iter0;
wire    ap_block_state13_pp0_stage0_iter1;
wire    ap_block_state15_pp0_stage0_iter2;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_state19_pp0_stage0_iter4;
wire    ap_block_state21_pp0_stage0_iter5;
wire    ap_block_state23_pp0_stage0_iter6;
wire    ap_block_state25_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_11001;
reg   [17:0] reg_462;
reg    ap_enable_reg_pp0_iter5;
reg   [0:0] icmp_ln80_reg_734_pp0_iter4_reg;
reg   [17:0] reg_466;
reg   [17:0] reg_470;
wire  signed [10:0] trunc_ln76_2_fu_474_p1;
wire    ap_CS_fsm_state2;
wire  signed [7:0] trunc_ln76_fu_479_p1;
reg  signed [7:0] trunc_ln76_reg_675;
wire  signed [10:0] trunc_ln76_1_fu_483_p1;
wire    ap_CS_fsm_state3;
wire   [63:0] zext_ln76_fu_488_p1;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln76_1_fu_492_p1;
reg   [10:0] mul3_reg_705;
wire    ap_CS_fsm_state7;
reg   [10:0] mul5_reg_710;
wire    ap_CS_fsm_state8;
reg   [10:0] mul11_reg_715;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [63:0] mul_ln76_reg_729;
wire   [0:0] icmp_ln80_fu_496_p2;
reg   [0:0] icmp_ln80_reg_734_pp0_iter1_reg;
reg   [0:0] icmp_ln80_reg_734_pp0_iter2_reg;
reg   [0:0] icmp_ln80_reg_734_pp0_iter5_reg;
reg   [0:0] icmp_ln80_reg_734_pp0_iter6_reg;
wire   [63:0] add_ln80_2_fu_501_p2;
reg   [63:0] add_ln80_2_reg_738;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln82_fu_513_p2;
reg   [0:0] icmp_ln82_reg_743;
wire   [31:0] select_ln80_1_fu_518_p3;
reg   [31:0] select_ln80_1_reg_748;
wire  signed [7:0] trunc_ln80_fu_526_p1;
reg  signed [7:0] trunc_ln80_reg_753;
wire   [10:0] trunc_ln80_1_fu_530_p1;
reg   [10:0] trunc_ln80_1_reg_758;
wire  signed [10:0] add_ln80_1_fu_545_p2;
reg  signed [10:0] add_ln80_1_reg_763;
wire   [10:0] empty_fu_550_p1;
reg   [10:0] empty_reg_768;
reg   [10:0] empty_reg_768_pp0_iter1_reg;
reg   [10:0] empty_reg_768_pp0_iter2_reg;
reg   [10:0] empty_reg_768_pp0_iter3_reg;
wire   [7:0] empty_86_fu_554_p1;
reg   [7:0] empty_86_reg_773;
reg   [7:0] empty_86_reg_773_pp0_iter1_reg;
reg   [7:0] empty_86_reg_773_pp0_iter2_reg;
reg   [7:0] empty_86_reg_773_pp0_iter3_reg;
wire   [31:0] add_ln82_fu_558_p2;
reg   [31:0] add_ln82_reg_778;
wire   [7:0] add8_fu_564_p2;
reg   [7:0] add8_reg_783;
wire   [10:0] add15_fu_583_p2;
reg   [10:0] add15_reg_788;
wire   [7:0] output_l11_addr_gep_fu_176_p3;
wire   [7:0] output_l12_addr_gep_fu_184_p3;
wire   [7:0] output_l13_addr_gep_fu_192_p3;
wire   [63:0] idxprom16_fu_589_p1;
reg   [63:0] idxprom16_reg_828;
reg   [63:0] idxprom16_reg_828_pp0_iter6_reg;
reg   [17:0] output_l1_load_reg_842;
reg   [10:0] output_l2_reduction_0_addr_reg_847;
reg   [10:0] output_l2_reduction_0_addr_reg_847_pp0_iter6_reg;
reg   [10:0] output_l2_reduction_1_addr_1_reg_853;
reg   [10:0] output_l2_reduction_1_addr_1_reg_853_pp0_iter6_reg;
reg   [10:0] output_l2_reduction_2_addr_1_reg_858;
reg   [10:0] output_l2_reduction_2_addr_1_reg_858_pp0_iter6_reg;
reg   [10:0] output_l2_reduction_3_addr_1_reg_863;
reg   [10:0] output_l2_reduction_3_addr_1_reg_863_pp0_iter6_reg;
wire   [31:0] output_l1_load_cast_fu_596_p1;
reg  signed [31:0] output_l1_load_cast_reg_868;
reg   [31:0] output_l2_reduction_0_load_reg_873;
reg   [31:0] output_l2_reduction_1_load_reg_878;
reg   [31:0] output_l2_reduction_2_load_reg_883;
reg   [31:0] output_l2_reduction_3_load_reg_888;
wire  signed [31:0] output_l13_load_cast_fu_613_p1;
wire   [31:0] add_ln94_fu_618_p2;
reg   [31:0] add_ln94_reg_898;
wire   [31:0] add_ln94_1_fu_626_p2;
reg   [31:0] add_ln94_1_reg_904;
wire   [31:0] add_ln94_2_fu_635_p2;
reg   [31:0] add_ln94_2_reg_910;
wire   [31:0] add_ln94_3_fu_644_p2;
reg   [31:0] add_ln94_3_reg_916;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state11;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg   [63:0] ap_phi_mux_indvar_flatten_phi_fu_384_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_hi_phi_fu_395_p4;
reg   [31:0] ap_phi_mux_wi_phi_fu_406_p4;
wire   [31:0] ap_phi_reg_pp0_iter0_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter1_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter2_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter3_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter4_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter5_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter6_empty_87_reg_414;
reg   [31:0] ap_phi_reg_pp0_iter7_empty_87_reg_414;
wire   [63:0] idxprom_fu_569_p1;
wire    ap_block_pp0_stage1;
wire   [31:0] output_l11_load_cast_fu_601_p1;
wire   [31:0] output_l12_load_cast_fu_607_p1;
reg  signed [32:0] grp_fu_424_p0;
reg  signed [32:0] grp_fu_424_p1;
wire   [31:0] hi_4_fu_507_p2;
wire   [10:0] add_ln80_fu_541_p2;
wire   [31:0] select_ln80_fu_534_p3;
wire   [7:0] add8_fu_564_p1;
wire   [10:0] tmp1_fu_579_p2;
wire  signed [31:0] add_ln94_1_fu_626_p1;
wire  signed [31:0] add_ln94_2_fu_635_p1;
wire  signed [31:0] add_ln94_3_fu_644_p1;
wire    ap_CS_fsm_state26;
reg   [12:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_predicate_op124_load_state21;
reg    ap_enable_operation_124;
reg    ap_enable_state21_pp0_iter5_stage0;
reg    ap_predicate_op142_load_state22;
reg    ap_enable_operation_142;
reg    ap_enable_state22_pp0_iter5_stage1;
reg    ap_predicate_op146_store_state22;
reg    ap_enable_operation_146;
reg    ap_predicate_op170_store_state24;
reg    ap_enable_operation_170;
reg    ap_enable_state24_pp0_iter6_stage1;
reg    ap_predicate_op127_load_state21;
reg    ap_enable_operation_127;
reg    ap_predicate_op143_load_state22;
reg    ap_enable_operation_143;
reg    ap_predicate_op151_store_state22;
reg    ap_enable_operation_151;
reg    ap_predicate_op173_store_state24;
reg    ap_enable_operation_173;
reg    ap_predicate_op130_load_state21;
reg    ap_enable_operation_130;
reg    ap_predicate_op144_load_state22;
reg    ap_enable_operation_144;
reg    ap_predicate_op156_store_state22;
reg    ap_enable_operation_156;
reg    ap_predicate_op176_store_state24;
reg    ap_enable_operation_176;
reg    ap_predicate_op133_load_state21;
reg    ap_enable_operation_133;
reg    ap_predicate_op145_load_state22;
reg    ap_enable_operation_145;
reg    ap_predicate_op161_store_state22;
reg    ap_enable_operation_161;
reg    ap_predicate_op179_store_state24;
reg    ap_enable_operation_179;
reg    ap_predicate_op148_store_state22;
reg    ap_enable_operation_148;
reg    ap_predicate_op172_store_state24;
reg    ap_enable_operation_172;
reg    ap_predicate_op153_store_state22;
reg    ap_enable_operation_153;
reg    ap_predicate_op175_store_state24;
reg    ap_enable_operation_175;
reg    ap_predicate_op158_store_state22;
reg    ap_enable_operation_158;
reg    ap_predicate_op178_store_state24;
reg    ap_enable_operation_178;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_404;
reg    ap_condition_486;
reg    ap_condition_499;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
end

Conv_sysarr_runOutputL1toL2_output_l2_reduction_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
output_l2_reduction_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l2_reduction_0_address0),
    .ce0(output_l2_reduction_0_ce0),
    .we0(output_l2_reduction_0_we0),
    .d0(add_ln94_reg_898),
    .q0(output_l2_reduction_0_q0),
    .address1(output_l2_reduction_0_address1),
    .ce1(output_l2_reduction_0_ce1),
    .we1(output_l2_reduction_0_we1),
    .d1(output_l1_load_cast_fu_596_p1)
);

Conv_sysarr_runOutputL1toL2_output_l2_reduction_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
output_l2_reduction_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l2_reduction_1_address0),
    .ce0(output_l2_reduction_1_ce0),
    .we0(output_l2_reduction_1_we0),
    .d0(add_ln94_1_reg_904),
    .q0(output_l2_reduction_1_q0),
    .address1(output_l2_reduction_1_address1),
    .ce1(output_l2_reduction_1_ce1),
    .we1(output_l2_reduction_1_we1),
    .d1(output_l11_load_cast_fu_601_p1)
);

Conv_sysarr_runOutputL1toL2_output_l2_reduction_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
output_l2_reduction_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l2_reduction_2_address0),
    .ce0(output_l2_reduction_2_ce0),
    .we0(output_l2_reduction_2_we0),
    .d0(add_ln94_2_reg_910),
    .q0(output_l2_reduction_2_q0),
    .address1(output_l2_reduction_2_address1),
    .ce1(output_l2_reduction_2_ce1),
    .we1(output_l2_reduction_2_we1),
    .d1(output_l12_load_cast_fu_607_p1)
);

Conv_sysarr_runOutputL1toL2_output_l2_reduction_0 #(
    .DataWidth( 32 ),
    .AddressRange( 1568 ),
    .AddressWidth( 11 ))
output_l2_reduction_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(output_l2_reduction_3_address0),
    .ce0(output_l2_reduction_3_ce0),
    .we0(output_l2_reduction_3_we0),
    .d0(add_ln94_3_reg_916),
    .q0(output_l2_reduction_3_q0),
    .address1(output_l2_reduction_3_address1),
    .ce1(output_l2_reduction_3_ce1),
    .we1(output_l2_reduction_3_we1),
    .d1(output_l2_reduction_3_d1)
);

Conv_sysarr_mul_33s_33s_64_7_1 #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 33 ),
    .din1_WIDTH( 33 ),
    .dout_WIDTH( 64 ))
mul_33s_33s_64_7_1_U176(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_424_p0),
    .din1(grp_fu_424_p1),
    .ce(1'b1),
    .dout(grp_fu_424_p2)
);

Conv_sysarr_add_64ns_64ns_64_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
add_64ns_64ns_64_1_1_U177(
    .din0(ap_phi_mux_indvar_flatten_phi_fu_384_p4),
    .din1(64'd1),
    .dout(add_ln80_2_fu_501_p2)
);

Conv_sysarr_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U178(
    .din0(32'd1),
    .din1(ap_phi_mux_hi_phi_fu_395_p4),
    .dout(hi_4_fu_507_p2)
);

Conv_sysarr_add_32ns_32ns_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32ns_32_1_1_U179(
    .din0(select_ln80_fu_534_p3),
    .din1(32'd1),
    .dout(add_ln82_fu_558_p2)
);

Conv_sysarr_add_8ns_8ns_8_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
add_8ns_8ns_8_1_1_U180(
    .din0(empty_86_reg_773_pp0_iter3_reg),
    .din1(add8_fu_564_p1),
    .dout(add8_fu_564_p2)
);

Conv_sysarr_add_32ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32s_32_1_1_U181(
    .din0(output_l2_reduction_0_load_reg_873),
    .din1(output_l1_load_cast_reg_868),
    .dout(add_ln94_fu_618_p2)
);

Conv_sysarr_add_32ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32s_32_1_1_U182(
    .din0(output_l2_reduction_1_load_reg_878),
    .din1(add_ln94_1_fu_626_p1),
    .dout(add_ln94_1_fu_626_p2)
);

Conv_sysarr_add_32ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32s_32_1_1_U183(
    .din0(output_l2_reduction_2_load_reg_883),
    .din1(add_ln94_2_fu_635_p1),
    .dout(add_ln94_2_fu_635_p2)
);

Conv_sysarr_add_32ns_32s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
add_32ns_32s_32_1_1_U184(
    .din0(output_l2_reduction_3_load_reg_888),
    .din1(add_ln94_3_fu_644_p1),
    .dout(add_ln94_3_fu_644_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_404)) begin
        if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1))) begin
            ap_phi_reg_pp0_iter6_empty_87_reg_414 <= output_l13_load_cast_fu_613_p1;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter6_empty_87_reg_414 <= ap_phi_reg_pp0_iter5_empty_87_reg_414;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_486)) begin
        if (((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0))) begin
            ap_phi_reg_pp0_iter7_empty_87_reg_414 <= add_ln94_3_reg_916;
        end else if ((1'b1 == 1'b1)) begin
            ap_phi_reg_pp0_iter7_empty_87_reg_414 <= ap_phi_reg_pp0_iter6_empty_87_reg_414;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        hi_reg_391 <= select_ln80_1_reg_748;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        hi_reg_391 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_380 <= add_ln80_2_reg_738;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_reg_380 <= 64'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wi_reg_402 <= add_ln82_reg_778;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        wi_reg_402 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add15_reg_788 <= add15_fu_583_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add8_reg_783 <= add8_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln80_1_reg_763 <= add_ln80_1_fu_545_p2;
        empty_86_reg_773 <= empty_86_fu_554_p1;
        empty_reg_768 <= empty_fu_550_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln80_2_reg_738 <= add_ln80_2_fu_501_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln82_reg_778 <= add_ln82_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln94_1_reg_904 <= add_ln94_1_fu_626_p2;
        add_ln94_2_reg_910 <= add_ln94_2_fu_635_p2;
        add_ln94_3_reg_916 <= add_ln94_3_fu_644_p2;
        add_ln94_reg_898 <= add_ln94_fu_618_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter1_empty_87_reg_414 <= ap_phi_reg_pp0_iter0_empty_87_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter2_empty_87_reg_414 <= ap_phi_reg_pp0_iter1_empty_87_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter3_empty_87_reg_414 <= ap_phi_reg_pp0_iter2_empty_87_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_reg_pp0_iter4_empty_87_reg_414 <= ap_phi_reg_pp0_iter3_empty_87_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ap_phi_reg_pp0_iter5_empty_87_reg_414 <= ap_phi_reg_pp0_iter4_empty_87_reg_414;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        empty_86_reg_773_pp0_iter1_reg <= empty_86_reg_773;
        empty_86_reg_773_pp0_iter2_reg <= empty_86_reg_773_pp0_iter1_reg;
        empty_86_reg_773_pp0_iter3_reg <= empty_86_reg_773_pp0_iter2_reg;
        empty_reg_768_pp0_iter1_reg <= empty_reg_768;
        empty_reg_768_pp0_iter2_reg <= empty_reg_768_pp0_iter1_reg;
        empty_reg_768_pp0_iter3_reg <= empty_reg_768_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln80_reg_734 <= icmp_ln80_fu_496_p2;
        icmp_ln80_reg_734_pp0_iter1_reg <= icmp_ln80_reg_734;
        icmp_ln80_reg_734_pp0_iter2_reg <= icmp_ln80_reg_734_pp0_iter1_reg;
        icmp_ln80_reg_734_pp0_iter3_reg <= icmp_ln80_reg_734_pp0_iter2_reg;
        icmp_ln80_reg_734_pp0_iter4_reg <= icmp_ln80_reg_734_pp0_iter3_reg;
        icmp_ln80_reg_734_pp0_iter5_reg <= icmp_ln80_reg_734_pp0_iter4_reg;
        icmp_ln80_reg_734_pp0_iter6_reg <= icmp_ln80_reg_734_pp0_iter5_reg;
        idxprom16_reg_828_pp0_iter6_reg[10 : 0] <= idxprom16_reg_828[10 : 0];
        output_l2_reduction_0_addr_reg_847_pp0_iter6_reg <= output_l2_reduction_0_addr_reg_847;
        output_l2_reduction_1_addr_1_reg_853_pp0_iter6_reg <= output_l2_reduction_1_addr_1_reg_853;
        output_l2_reduction_2_addr_1_reg_858_pp0_iter6_reg <= output_l2_reduction_2_addr_1_reg_858;
        output_l2_reduction_3_addr_1_reg_863_pp0_iter6_reg <= output_l2_reduction_3_addr_1_reg_863;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln82_reg_743 <= icmp_ln82_fu_513_p2;
        trunc_ln80_1_reg_758 <= trunc_ln80_1_fu_530_p1;
        trunc_ln80_reg_753 <= trunc_ln80_fu_526_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        idxprom16_reg_828[10 : 0] <= idxprom16_fu_589_p1[10 : 0];
        output_l1_load_reg_842 <= output_l1_q0;
        output_l2_reduction_0_addr_reg_847 <= idxprom16_fu_589_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mul11_reg_715 <= grp_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mul3_reg_705 <= grp_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul5_reg_710 <= grp_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        mul_ln76_reg_729 <= grp_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l1_load_cast_reg_868 <= output_l1_load_cast_fu_596_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_0_load_reg_873 <= output_l2_reduction_0_q0;
        output_l2_reduction_1_load_reg_878 <= output_l2_reduction_1_q0;
        output_l2_reduction_2_load_reg_883 <= output_l2_reduction_2_q0;
        output_l2_reduction_3_load_reg_888 <= output_l2_reduction_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l2_reduction_1_addr_1_reg_853 <= idxprom16_fu_589_p1;
        output_l2_reduction_2_addr_1_reg_858 <= idxprom16_fu_589_p1;
        output_l2_reduction_3_addr_1_reg_863 <= idxprom16_fu_589_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln80_reg_734_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln80_reg_734_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        reg_458 <= grp_fu_424_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((isFirst == 1'd1) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        reg_462 <= output_l11_q0;
        reg_466 <= output_l12_q0;
        reg_470 <= output_l13_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln80_1_reg_748 <= select_ln80_1_fu_518_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        trunc_ln76_reg_675 <= trunc_ln76_fu_479_p1;
    end
end

always @ (*) begin
    if ((icmp_ln80_fu_496_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_hi_phi_fu_395_p4 = select_ln80_1_reg_748;
    end else begin
        ap_phi_mux_hi_phi_fu_395_p4 = hi_reg_391;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_384_p4 = add_ln80_2_reg_738;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_384_p4 = indvar_flatten_reg_380;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln80_reg_734 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_wi_phi_fu_406_p4 = add_ln82_reg_778;
    end else begin
        ap_phi_mux_wi_phi_fu_406_p4 = wi_reg_402;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_424_p0 = W;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_424_p0 = trunc_ln80_reg_753;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_424_p0 = zext_ln76_1_fu_492_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_424_p0 = H;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_424_p0 = wo;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_424_p0 = ho;
    end else begin
        grp_fu_424_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_424_p1 = add_ln80_1_reg_763;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_424_p1 = trunc_ln76_reg_675;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_424_p1 = zext_ln76_fu_488_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        grp_fu_424_p1 = ko;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_424_p1 = trunc_ln76_1_fu_483_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_424_p1 = trunc_ln76_2_fu_474_p1;
    end else begin
        grp_fu_424_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_499)) begin
        if ((isFirst == 1'd1)) begin
            output_l11_address0 = output_l11_addr_gep_fu_176_p3;
        end else if ((isFirst == 1'd0)) begin
            output_l11_address0 = idxprom_fu_569_p1;
        end else begin
            output_l11_address0 = 'bx;
        end
    end else begin
        output_l11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((isFirst == 1'd1) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_l11_ce0 = 1'b1;
    end else begin
        output_l11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_499)) begin
        if ((isFirst == 1'd1)) begin
            output_l12_address0 = output_l12_addr_gep_fu_184_p3;
        end else if ((isFirst == 1'd0)) begin
            output_l12_address0 = idxprom_fu_569_p1;
        end else begin
            output_l12_address0 = 'bx;
        end
    end else begin
        output_l12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((isFirst == 1'd1) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_l12_ce0 = 1'b1;
    end else begin
        output_l12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_499)) begin
        if ((isFirst == 1'd1)) begin
            output_l13_address0 = output_l13_addr_gep_fu_192_p3;
        end else if ((isFirst == 1'd0)) begin
            output_l13_address0 = idxprom_fu_569_p1;
        end else begin
            output_l13_address0 = 'bx;
        end
    end else begin
        output_l13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((isFirst == 1'd1) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        output_l13_ce0 = 1'b1;
    end else begin
        output_l13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l1_ce0 = 1'b1;
    end else begin
        output_l1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_0_ce0 = 1'b1;
    end else begin
        output_l2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_0_ce1 = 1'b1;
    end else begin
        output_l2_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_0_we0 = 1'b1;
    end else begin
        output_l2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_0_we1 = 1'b1;
    end else begin
        output_l2_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_1_ce0 = 1'b1;
    end else begin
        output_l2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_1_ce1 = 1'b1;
    end else begin
        output_l2_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_1_we0 = 1'b1;
    end else begin
        output_l2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_1_we1 = 1'b1;
    end else begin
        output_l2_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_2_ce0 = 1'b1;
    end else begin
        output_l2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_2_ce1 = 1'b1;
    end else begin
        output_l2_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_2_we0 = 1'b1;
    end else begin
        output_l2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_2_we1 = 1'b1;
    end else begin
        output_l2_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l2_3_ce0 = 1'b1;
    end else begin
        output_l2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        output_l2_3_we0 = 1'b1;
    end else begin
        output_l2_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_l2_reduction_0_address0 = output_l2_reduction_0_addr_reg_847_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        output_l2_reduction_0_address0 = idxprom16_fu_589_p1;
    end else begin
        output_l2_reduction_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_l2_reduction_0_ce0 = 1'b1;
    end else begin
        output_l2_reduction_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_0_ce1 = 1'b1;
    end else begin
        output_l2_reduction_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_0_we0 = 1'b1;
    end else begin
        output_l2_reduction_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_0_we1 = 1'b1;
    end else begin
        output_l2_reduction_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_l2_reduction_1_address0 = output_l2_reduction_1_addr_1_reg_853_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        output_l2_reduction_1_address0 = idxprom16_fu_589_p1;
    end else begin
        output_l2_reduction_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_l2_reduction_1_ce0 = 1'b1;
    end else begin
        output_l2_reduction_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_1_ce1 = 1'b1;
    end else begin
        output_l2_reduction_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_1_we0 = 1'b1;
    end else begin
        output_l2_reduction_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_1_we1 = 1'b1;
    end else begin
        output_l2_reduction_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_l2_reduction_2_address0 = output_l2_reduction_2_addr_1_reg_858_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        output_l2_reduction_2_address0 = idxprom16_fu_589_p1;
    end else begin
        output_l2_reduction_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_l2_reduction_2_ce0 = 1'b1;
    end else begin
        output_l2_reduction_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_2_ce1 = 1'b1;
    end else begin
        output_l2_reduction_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_2_we0 = 1'b1;
    end else begin
        output_l2_reduction_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_2_we1 = 1'b1;
    end else begin
        output_l2_reduction_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        output_l2_reduction_3_address0 = output_l2_reduction_3_addr_1_reg_863_pp0_iter6_reg;
    end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        output_l2_reduction_3_address0 = idxprom16_fu_589_p1;
    end else begin
        output_l2_reduction_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        output_l2_reduction_3_ce0 = 1'b1;
    end else begin
        output_l2_reduction_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_3_ce1 = 1'b1;
    end else begin
        output_l2_reduction_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_3_we0 = 1'b1;
    end else begin
        output_l2_reduction_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        output_l2_reduction_3_we1 = 1'b1;
    end else begin
        output_l2_reduction_3_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_496_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if ((((ap_enable_reg_pp0_iter7 == 1'b1) & (ap_enable_reg_pp0_iter6 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln80_fu_496_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add15_fu_583_p2 = (tmp1_fu_579_p2 + reg_458);

assign add8_fu_564_p1 = reg_458;

assign add_ln80_1_fu_545_p2 = (add_ln80_fu_541_p2 + mul11_reg_715);

assign add_ln80_fu_541_p2 = (mul3_reg_705 + trunc_ln80_1_reg_758);

assign add_ln94_1_fu_626_p1 = $signed(reg_462);

assign add_ln94_2_fu_635_p1 = $signed(reg_466);

assign add_ln94_3_fu_644_p1 = $signed(reg_470);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_pp0 = (((1'b1 == ap_block_pp0_stage1_subdone) & (ap_ST_fsm_pp0_stage1 == ap_CS_fsm)) | ((1'b1 == ap_block_pp0_stage0_subdone) & (ap_ST_fsm_pp0_stage0 == ap_CS_fsm)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_404 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_486 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001));
end

always @ (*) begin
    ap_condition_499 = ((icmp_ln80_reg_734_pp0_iter4_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage1));
end

always @ (*) begin
    ap_enable_operation_124 = (ap_predicate_op124_load_state21 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_127 = (ap_predicate_op127_load_state21 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_130 = (ap_predicate_op130_load_state21 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_133 = (ap_predicate_op133_load_state21 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_142 = (ap_predicate_op142_load_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_143 = (ap_predicate_op143_load_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_144 = (ap_predicate_op144_load_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_145 = (ap_predicate_op145_load_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_146 = (ap_predicate_op146_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_148 = (ap_predicate_op148_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_151 = (ap_predicate_op151_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_153 = (ap_predicate_op153_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_156 = (ap_predicate_op156_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_158 = (ap_predicate_op158_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_161 = (ap_predicate_op161_store_state22 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_170 = (ap_predicate_op170_store_state24 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_172 = (ap_predicate_op172_store_state24 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_173 = (ap_predicate_op173_store_state24 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_175 = (ap_predicate_op175_store_state24 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_176 = (ap_predicate_op176_store_state24 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_178 = (ap_predicate_op178_store_state24 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_179 = (ap_predicate_op179_store_state24 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state21_pp0_iter5_stage0 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_state22_pp0_iter5_stage1 = ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state24_pp0_iter6_stage1 = ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

assign ap_phi_reg_pp0_iter0_empty_87_reg_414 = 'bx;

always @ (*) begin
    ap_predicate_op124_load_state21 = ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op127_load_state21 = ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op130_load_state21 = ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op133_load_state21 = ((isFirst == 1'd0) & (icmp_ln80_reg_734_pp0_iter4_reg == 1'd0));
end

always @ (*) begin
    ap_predicate_op142_load_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op143_load_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op144_load_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op145_load_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op146_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op148_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op151_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op153_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op156_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op158_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op161_store_state22 = ((icmp_ln80_reg_734_pp0_iter5_reg == 1'd0) & (isFirst == 1'd1));
end

always @ (*) begin
    ap_predicate_op170_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op172_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op173_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op175_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op176_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op178_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

always @ (*) begin
    ap_predicate_op179_store_state24 = ((icmp_ln80_reg_734_pp0_iter6_reg == 1'd0) & (isFirst == 1'd0));
end

assign empty_86_fu_554_p1 = select_ln80_fu_534_p3[7:0];

assign empty_fu_550_p1 = select_ln80_fu_534_p3[10:0];

assign icmp_ln80_fu_496_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_384_p4 == mul_ln76_reg_729) ? 1'b1 : 1'b0);

assign icmp_ln82_fu_513_p2 = ((ap_phi_mux_wi_phi_fu_406_p4 == TILESIZE_W) ? 1'b1 : 1'b0);

assign idxprom16_fu_589_p1 = add15_reg_788;

assign idxprom_fu_569_p1 = add8_reg_783;

assign output_l11_addr_gep_fu_176_p3 = idxprom_fu_569_p1;

assign output_l11_load_cast_fu_601_p1 = $signed(reg_462);

assign output_l12_addr_gep_fu_184_p3 = idxprom_fu_569_p1;

assign output_l12_load_cast_fu_607_p1 = $signed(reg_466);

assign output_l13_addr_gep_fu_192_p3 = idxprom_fu_569_p1;

assign output_l13_load_cast_fu_613_p1 = $signed(reg_470);

assign output_l1_address0 = idxprom_fu_569_p1;

assign output_l1_load_cast_fu_596_p1 = $signed(output_l1_load_reg_842);

assign output_l2_0_address0 = idxprom16_reg_828_pp0_iter6_reg;

assign output_l2_0_address1 = idxprom16_reg_828;

assign output_l2_0_d0 = add_ln94_reg_898;

assign output_l2_0_d1 = output_l1_load_cast_fu_596_p1;

assign output_l2_1_address0 = idxprom16_reg_828_pp0_iter6_reg;

assign output_l2_1_address1 = idxprom16_reg_828;

assign output_l2_1_d0 = add_ln94_1_reg_904;

assign output_l2_1_d1 = output_l11_load_cast_fu_601_p1;

assign output_l2_2_address0 = idxprom16_reg_828_pp0_iter6_reg;

assign output_l2_2_address1 = idxprom16_reg_828;

assign output_l2_2_d0 = add_ln94_2_reg_910;

assign output_l2_2_d1 = output_l12_load_cast_fu_607_p1;

assign output_l2_3_address0 = idxprom16_reg_828_pp0_iter6_reg;

assign output_l2_3_d0 = ap_phi_reg_pp0_iter7_empty_87_reg_414;

assign output_l2_reduction_0_address1 = output_l2_reduction_0_addr_reg_847;

assign output_l2_reduction_1_address1 = idxprom16_reg_828;

assign output_l2_reduction_2_address1 = idxprom16_reg_828;

assign output_l2_reduction_3_address1 = idxprom16_reg_828;

assign output_l2_reduction_3_d1 = $signed(reg_470);

assign select_ln80_1_fu_518_p3 = ((icmp_ln82_fu_513_p2[0:0] === 1'b1) ? hi_4_fu_507_p2 : ap_phi_mux_hi_phi_fu_395_p4);

assign select_ln80_fu_534_p3 = ((icmp_ln82_reg_743[0:0] === 1'b1) ? 32'd0 : wi_reg_402);

assign tmp1_fu_579_p2 = (mul5_reg_710 + empty_reg_768_pp0_iter3_reg);

assign trunc_ln76_1_fu_483_p1 = TILESIZE_W[10:0];

assign trunc_ln76_2_fu_474_p1 = TILESIZE_H[10:0];

assign trunc_ln76_fu_479_p1 = TILESIZE_W[7:0];

assign trunc_ln80_1_fu_530_p1 = select_ln80_1_fu_518_p3[10:0];

assign trunc_ln80_fu_526_p1 = select_ln80_1_fu_518_p3[7:0];

assign zext_ln76_1_fu_492_p1 = TILESIZE_W;

assign zext_ln76_fu_488_p1 = TILESIZE_H;

always @ (posedge ap_clk) begin
    idxprom16_reg_828[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
    idxprom16_reg_828_pp0_iter6_reg[63:11] <= 53'b00000000000000000000000000000000000000000000000000000;
end

endmodule //Conv_sysarr_runOutputL1toL2
